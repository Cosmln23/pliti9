"use strict";(()=>{var e={};e.id=6891,e.ids=[6891],e.modules={30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},71722:(e,s,t)=>{t.r(s),t.d(s,{headerHooks:()=>E,originalPathname:()=>y,patchFetch:()=>f,requestAsyncStorage:()=>_,routeModule:()=>l,serverHooks:()=>v,staticGenerationAsyncStorage:()=>p,staticGenerationBailout:()=>T});var a={};t.r(a),t.d(a,{GET:()=>u,POST:()=>d});var i=t(95419),n=t(69108),r=t(99678),o=t(78070),c=t(24522);async function d(e){try{let s=await e.json();if(!s.code||!s.deviceInfo)return o.Z.json({valid:!1,error:"Cod și informații dispozitiv sunt obligatorii"},{status:400});let t=await (0,c.xL)(s.code);if(!t)return o.Z.json({valid:!1,error:"Cod invalid sau expirat"});let a=await (0,c.yj)(s.code,s.deviceInfo);return o.Z.json({valid:!0,accessCode:{code:t.code,email:t.email,expires_at:t.expires_at,usage_count:t.usage_count},session:{sessionId:a.sessionId,deviceInfo:s.deviceInfo,startedAt:new Date().toISOString()}})}catch(e){return console.error("Eroare validare cod acces:",e),o.Z.json({valid:!1,error:"Eroare internă server"},{status:500})}}async function u(){return o.Z.json({message:"Access code validation endpoint - use POST to validate codes"})}let l=new i.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/access-codes/validate/route",pathname:"/api/access-codes/validate",filename:"route",bundlePath:"app/api/access-codes/validate/route"},resolvedPagePath:"C:\\Users\\user\\Desktop\\plipli paranormal\\app\\api\\access-codes\\validate\\route.ts",nextConfigOutput:"",userland:a}),{requestAsyncStorage:_,staticGenerationAsyncStorage:p,serverHooks:v,headerHooks:E,staticGenerationBailout:T}=l,y="/api/access-codes/validate/route";function f(){return(0,r.patchFetch)({serverHooks:v,staticGenerationAsyncStorage:p})}},24522:(e,s,t)=>{t.d(s,{TC:()=>l,OF:()=>i,VT:()=>c,Xg:()=>n,en:()=>r,RG:()=>o,yj:()=>u,B6:()=>_,xL:()=>d});let a=new(require("pg")).Pool({connectionString:"postgresql://localhost:5432/plipli9_local"});async function i(e){return(await a.query(`INSERT INTO access_codes (code, email, phone_number, payment_intent_id, amount, payment_method, expires_at, status, usage_count, ip_address) 
     VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING *`,[e.code,e.email,e.phone_number,e.payment_intent_id,e.amount,e.payment_method,e.expires_at,e.status,e.usage_count,e.ip_address])).rows[0]}async function n(e){let s=await a.query("SELECT * FROM access_codes WHERE code = $1 LIMIT 1",[e]);return s.rows.length>0?s.rows[0]:null}async function r(){return(await a.query("SELECT * FROM access_codes WHERE status = $1 AND expires_at > NOW()",["active"])).rows}async function o(){let e=await a.query("SELECT * FROM live_sessions WHERE status = $1 ORDER BY started_at DESC LIMIT 1",["active"]);return e.rows.length>0?e.rows[0]:null}async function c(e){await a.query("UPDATE live_sessions SET status = $1, ended_at = NOW() WHERE session_id = $2",["ended",e])}async function d(e){try{let s=e.trim().toUpperCase(),t=await a.query(`SELECT * FROM access_codes 
       WHERE code = $1 AND status = 'active' AND expires_at > CURRENT_TIMESTAMP`,[s]);if(0===t.rows.length)return null;return t.rows[0]}catch(e){return console.error("Eroare validare cod acces:",e),null}}async function u(e,s){try{let t=`session_${Date.now()}_${Math.random().toString(36).substr(2,9)}`;return await a.query(`UPDATE access_codes 
       SET 
         active_session_id = $1,
         active_device_info = $2,
         session_started_at = CURRENT_TIMESTAMP,
         last_activity_at = CURRENT_TIMESTAMP
       WHERE code = $3`,[t,JSON.stringify(s),e]),{success:!0,sessionId:t}}catch(e){throw console.error("Eroare pornire sesiune:",e),e}}async function l(e,s){try{let t=await a.query(`SELECT 
        active_session_id, 
        active_device_info, 
        session_started_at,
        status,
        expires_at
      FROM access_codes 
      WHERE code = $1`,[e]);if(0===t.rows.length)return{canAccess:!1,needsTakeover:!1,message:"Cod invalid sau expirat"};let i=t.rows[0];if(new Date>new Date(i.expires_at))return{canAccess:!1,needsTakeover:!1,message:"Cod expirat"};if(!i.active_session_id)return{canAccess:!0,needsTakeover:!1,message:"Cod disponibil pentru utilizare"};let n=i.active_device_info;if(n&&n.userAgent===s.userAgent&&n.ip===s.ip)return{canAccess:!0,needsTakeover:!1,message:"Sesiune existentă pe același dispozitiv"};return{canAccess:!1,needsTakeover:!0,currentDevice:{userAgent:n?.userAgent||"Unknown",ip:n?.ip||"Unknown",connectedAt:i.session_started_at,sessionId:i.active_session_id},message:"Cod \xeen folosință pe alt dispozitiv"}}catch(e){throw console.error("Eroare verificare sesiune:",e),e}}async function _(e,s){try{let t=`session_${Date.now()}_${Math.random().toString(36).substr(2,9)}`;return await a.query(`UPDATE access_codes 
       SET 
         active_session_id = $1,
         active_device_info = $2,
         session_started_at = CURRENT_TIMESTAMP,
         last_activity_at = CURRENT_TIMESTAMP,
         status = 'in_use',
         previous_sessions = previous_sessions || $3::jsonb
       WHERE code = $4`,[t,JSON.stringify(s),JSON.stringify([{...s,takenAt:new Date().toISOString(),action:"takeover"}]),e]),{success:!0,sessionId:t}}catch(e){throw console.error("Eroare takeover sesiune:",e),e}}}};var s=require("../../../../webpack-runtime.js");s.C(e);var t=e=>s(s.s=e),a=s.X(0,[1638,6206],()=>t(71722));module.exports=a})();