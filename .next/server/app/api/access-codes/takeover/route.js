"use strict";(()=>{var e={};e.id=1087,e.ids=[1087],e.modules={30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},78776:(e,s,t)=>{t.r(s),t.d(s,{headerHooks:()=>E,originalPathname:()=>y,patchFetch:()=>f,requestAsyncStorage:()=>l,routeModule:()=>_,serverHooks:()=>v,staticGenerationAsyncStorage:()=>p,staticGenerationBailout:()=>T});var r={};t.r(r),t.d(r,{GET:()=>d,POST:()=>u});var a=t(95419),n=t(69108),o=t(99678),i=t(78070),c=t(24522);async function u(e){try{let s=await e.json();if(!s.code||!s.deviceInfo||!s.confirmTakeover)return i.Z.json({error:"Cod, informații dispozitiv și confirmare takeover sunt obligatorii"},{status:400});let t=await (0,c.B6)(s.code,s.deviceInfo);if(!t.success)return i.Z.json({error:"Nu s-a putut prelua sesiunea"},{status:500});return i.Z.json({success:!0,sessionId:t.sessionId,message:"Sesiune preluată cu succes",actions:{disconnectPrevious:!0,startNewSession:!0}})}catch(e){return console.error("Eroare takeover sesiune:",e),i.Z.json({error:"Eroare internă server"},{status:500})}}async function d(){return i.Z.json({message:"Session takeover endpoint - use POST to takeover a session"})}let _=new a.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/access-codes/takeover/route",pathname:"/api/access-codes/takeover",filename:"route",bundlePath:"app/api/access-codes/takeover/route"},resolvedPagePath:"C:\\Users\\user\\Desktop\\plipli paranormal\\app\\api\\access-codes\\takeover\\route.ts",nextConfigOutput:"",userland:r}),{requestAsyncStorage:l,staticGenerationAsyncStorage:p,serverHooks:v,headerHooks:E,staticGenerationBailout:T}=_,y="/api/access-codes/takeover/route";function f(){return(0,o.patchFetch)({serverHooks:v,staticGenerationAsyncStorage:p})}},24522:(e,s,t)=>{t.d(s,{TC:()=>_,OF:()=>a,VT:()=>c,Xg:()=>n,en:()=>o,RG:()=>i,yj:()=>d,B6:()=>l,xL:()=>u});let r=new(require("pg")).Pool({connectionString:"postgresql://localhost:5432/plipli9_local"});async function a(e){return(await r.query(`INSERT INTO access_codes (code, email, phone_number, payment_intent_id, amount, payment_method, expires_at, status, usage_count, ip_address) 
     VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING *`,[e.code,e.email,e.phone_number,e.payment_intent_id,e.amount,e.payment_method,e.expires_at,e.status,e.usage_count,e.ip_address])).rows[0]}async function n(e){let s=await r.query("SELECT * FROM access_codes WHERE code = $1 LIMIT 1",[e]);return s.rows.length>0?s.rows[0]:null}async function o(){return(await r.query("SELECT * FROM access_codes WHERE status = $1 AND expires_at > NOW()",["active"])).rows}async function i(){let e=await r.query("SELECT * FROM live_sessions WHERE status = $1 ORDER BY started_at DESC LIMIT 1",["active"]);return e.rows.length>0?e.rows[0]:null}async function c(e){await r.query("UPDATE live_sessions SET status = $1, ended_at = NOW() WHERE session_id = $2",["ended",e])}async function u(e){try{let s=e.trim().toUpperCase(),t=await r.query(`SELECT * FROM access_codes 
       WHERE code = $1 AND status = 'active' AND expires_at > CURRENT_TIMESTAMP`,[s]);if(0===t.rows.length)return null;return t.rows[0]}catch(e){return console.error("Eroare validare cod acces:",e),null}}async function d(e,s){try{let t=`session_${Date.now()}_${Math.random().toString(36).substr(2,9)}`;return await r.query(`UPDATE access_codes 
       SET 
         active_session_id = $1,
         active_device_info = $2,
         session_started_at = CURRENT_TIMESTAMP,
         last_activity_at = CURRENT_TIMESTAMP
       WHERE code = $3`,[t,JSON.stringify(s),e]),{success:!0,sessionId:t}}catch(e){throw console.error("Eroare pornire sesiune:",e),e}}async function _(e,s){try{let t=await r.query(`SELECT 
        active_session_id, 
        active_device_info, 
        session_started_at,
        status,
        expires_at
      FROM access_codes 
      WHERE code = $1`,[e]);if(0===t.rows.length)return{canAccess:!1,needsTakeover:!1,message:"Cod invalid sau expirat"};let a=t.rows[0];if(new Date>new Date(a.expires_at))return{canAccess:!1,needsTakeover:!1,message:"Cod expirat"};if(!a.active_session_id)return{canAccess:!0,needsTakeover:!1,message:"Cod disponibil pentru utilizare"};let n=a.active_device_info;if(n&&n.userAgent===s.userAgent&&n.ip===s.ip)return{canAccess:!0,needsTakeover:!1,message:"Sesiune existentă pe același dispozitiv"};return{canAccess:!1,needsTakeover:!0,currentDevice:{userAgent:n?.userAgent||"Unknown",ip:n?.ip||"Unknown",connectedAt:a.session_started_at,sessionId:a.active_session_id},message:"Cod \xeen folosință pe alt dispozitiv"}}catch(e){throw console.error("Eroare verificare sesiune:",e),e}}async function l(e,s){try{let t=`session_${Date.now()}_${Math.random().toString(36).substr(2,9)}`;return await r.query(`UPDATE access_codes 
       SET 
         active_session_id = $1,
         active_device_info = $2,
         session_started_at = CURRENT_TIMESTAMP,
         last_activity_at = CURRENT_TIMESTAMP,
         status = 'in_use',
         previous_sessions = previous_sessions || $3::jsonb
       WHERE code = $4`,[t,JSON.stringify(s),JSON.stringify([{...s,takenAt:new Date().toISOString(),action:"takeover"}]),e]),{success:!0,sessionId:t}}catch(e){throw console.error("Eroare takeover sesiune:",e),e}}}};var s=require("../../../../webpack-runtime.js");s.C(e);var t=e=>s(s.s=e),r=s.X(0,[1638,6206],()=>t(78776));module.exports=r})();