"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-refractor";
exports.ids = ["vendor-chunks/react-refractor"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-refractor/lib/Refractor.js":
/*!*******************************************************!*\
  !*** ./node_modules/react-refractor/lib/Refractor.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar fract = __webpack_require__(/*! refractor/core.js */ \"(ssr)/./node_modules/refractor/core.js\");\nvar mapChildren = __webpack_require__(/*! ./mapChildren */ \"(ssr)/./node_modules/react-refractor/lib/mapChildren.js\");\nvar addMarkers = __webpack_require__(/*! ./addMarkers */ \"(ssr)/./node_modules/react-refractor/lib/addMarkers.js\");\n// eslint-disable-next-line id-length\nvar h = React.createElement;\nfunction Refractor(props) {\n    if (true) {\n        if (!fract.registered(props.language)) {\n            // eslint-disable-next-line no-console\n            console.warn('No language definitions for \"'.concat(props.language, '\" seems to be registered, did you forget to call `Refractor.registerLanguage()`?'));\n        }\n    }\n    var langClassName = \"language-\".concat(props.language);\n    var codeProps = {\n        className: langClassName\n    };\n    var preProps = {\n        className: [\n            props.className || \"refractor\",\n            langClassName\n        ].filter(Boolean).join(\" \")\n    };\n    if (props.inline) {\n        codeProps.style = {\n            display: \"inline\"\n        };\n        codeProps.className = props.className || \"refractor\";\n    }\n    var ast = fract.highlight(props.value, props.language);\n    if (props.markers && props.markers.length > 0) {\n        ast = addMarkers(ast, {\n            markers: props.markers\n        });\n    }\n    var value = ast.length === 0 ? props.value : ast.map(mapChildren.depth(0));\n    var code = h(\"code\", codeProps, value);\n    return props.inline ? code : h(\"pre\", preProps, code);\n}\nRefractor.registerLanguage = function(lang) {\n    return fract.register(lang);\n};\nRefractor.hasLanguage = function(lang) {\n    return fract.registered(lang);\n};\nmodule.exports = Refractor; //# sourceMappingURL=Refractor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVmcmFjdG9yL2xpYi9SZWZyYWN0b3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixJQUFJQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUNwQixJQUFJQyxRQUFRRCxtQkFBT0EsQ0FBQztBQUNwQixJQUFJRSxjQUFjRixtQkFBT0EsQ0FBQztBQUMxQixJQUFJRyxhQUFhSCxtQkFBT0EsQ0FBQztBQUV6QixxQ0FBcUM7QUFDckMsSUFBSUksSUFBSUwsTUFBTU0sYUFBYTtBQUMzQixTQUFTQyxVQUFVQyxLQUFLO0lBQ3RCLElBQUlDLElBQXlCLEVBQWM7UUFDekMsSUFBSSxDQUFDUCxNQUFNUSxVQUFVLENBQUNGLE1BQU1HLFFBQVEsR0FBRztZQUNyQyxzQ0FBc0M7WUFDdENDLFFBQVFDLElBQUksQ0FBQyxnQ0FBaUNDLE1BQU0sQ0FBQ04sTUFBTUcsUUFBUSxFQUFFO1FBQ3ZFO0lBQ0Y7SUFDQSxJQUFJSSxnQkFBZ0IsWUFBWUQsTUFBTSxDQUFDTixNQUFNRyxRQUFRO0lBQ3JELElBQUlLLFlBQVk7UUFDZEMsV0FBV0Y7SUFDYjtJQUNBLElBQUlHLFdBQVc7UUFDYkQsV0FBVztZQUFDVCxNQUFNUyxTQUFTLElBQUk7WUFBYUY7U0FBYyxDQUFDSSxNQUFNLENBQUNDLFNBQVNDLElBQUksQ0FBQztJQUNsRjtJQUNBLElBQUliLE1BQU1jLE1BQU0sRUFBRTtRQUNoQk4sVUFBVU8sS0FBSyxHQUFHO1lBQ2hCQyxTQUFTO1FBQ1g7UUFDQVIsVUFBVUMsU0FBUyxHQUFHVCxNQUFNUyxTQUFTLElBQUk7SUFDM0M7SUFDQSxJQUFJUSxNQUFNdkIsTUFBTXdCLFNBQVMsQ0FBQ2xCLE1BQU1tQixLQUFLLEVBQUVuQixNQUFNRyxRQUFRO0lBQ3JELElBQUlILE1BQU1vQixPQUFPLElBQUlwQixNQUFNb0IsT0FBTyxDQUFDQyxNQUFNLEdBQUcsR0FBRztRQUM3Q0osTUFBTXJCLFdBQVdxQixLQUFLO1lBQ3BCRyxTQUFTcEIsTUFBTW9CLE9BQU87UUFDeEI7SUFDRjtJQUNBLElBQUlELFFBQVFGLElBQUlJLE1BQU0sS0FBSyxJQUFJckIsTUFBTW1CLEtBQUssR0FBR0YsSUFBSUssR0FBRyxDQUFDM0IsWUFBWTRCLEtBQUssQ0FBQztJQUN2RSxJQUFJQyxPQUFPM0IsRUFBRSxRQUFRVyxXQUFXVztJQUNoQyxPQUFPbkIsTUFBTWMsTUFBTSxHQUFHVSxPQUFPM0IsRUFBRSxPQUFPYSxVQUFVYztBQUNsRDtBQUNBekIsVUFBVTBCLGdCQUFnQixHQUFHLFNBQVVDLElBQUk7SUFDekMsT0FBT2hDLE1BQU1pQyxRQUFRLENBQUNEO0FBQ3hCO0FBQ0EzQixVQUFVNkIsV0FBVyxHQUFHLFNBQVVGLElBQUk7SUFDcEMsT0FBT2hDLE1BQU1RLFVBQVUsQ0FBQ3dCO0FBQzFCO0FBQ0FHLE9BQU9DLE9BQU8sR0FBRy9CLFdBQ2pCLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BsaXBsaTktcGFyYW5vcm1hbC8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWZyYWN0b3IvbGliL1JlZnJhY3Rvci5qcz9kOGNhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIGZyYWN0ID0gcmVxdWlyZSgncmVmcmFjdG9yL2NvcmUuanMnKTtcbnZhciBtYXBDaGlsZHJlbiA9IHJlcXVpcmUoJy4vbWFwQ2hpbGRyZW4nKTtcbnZhciBhZGRNYXJrZXJzID0gcmVxdWlyZSgnLi9hZGRNYXJrZXJzJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpZC1sZW5ndGhcbnZhciBoID0gUmVhY3QuY3JlYXRlRWxlbWVudDtcbmZ1bmN0aW9uIFJlZnJhY3Rvcihwcm9wcykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICghZnJhY3QucmVnaXN0ZXJlZChwcm9wcy5sYW5ndWFnZSkpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXCJObyBsYW5ndWFnZSBkZWZpbml0aW9ucyBmb3IgXFxcIlwiLmNvbmNhdChwcm9wcy5sYW5ndWFnZSwgXCJcXFwiIHNlZW1zIHRvIGJlIHJlZ2lzdGVyZWQsIGRpZCB5b3UgZm9yZ2V0IHRvIGNhbGwgYFJlZnJhY3Rvci5yZWdpc3Rlckxhbmd1YWdlKClgP1wiKSk7XG4gICAgfVxuICB9XG4gIHZhciBsYW5nQ2xhc3NOYW1lID0gXCJsYW5ndWFnZS1cIi5jb25jYXQocHJvcHMubGFuZ3VhZ2UpO1xuICB2YXIgY29kZVByb3BzID0ge1xuICAgIGNsYXNzTmFtZTogbGFuZ0NsYXNzTmFtZVxuICB9O1xuICB2YXIgcHJlUHJvcHMgPSB7XG4gICAgY2xhc3NOYW1lOiBbcHJvcHMuY2xhc3NOYW1lIHx8ICdyZWZyYWN0b3InLCBsYW5nQ2xhc3NOYW1lXS5maWx0ZXIoQm9vbGVhbikuam9pbignICcpXG4gIH07XG4gIGlmIChwcm9wcy5pbmxpbmUpIHtcbiAgICBjb2RlUHJvcHMuc3R5bGUgPSB7XG4gICAgICBkaXNwbGF5OiAnaW5saW5lJ1xuICAgIH07XG4gICAgY29kZVByb3BzLmNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSB8fCAncmVmcmFjdG9yJztcbiAgfVxuICB2YXIgYXN0ID0gZnJhY3QuaGlnaGxpZ2h0KHByb3BzLnZhbHVlLCBwcm9wcy5sYW5ndWFnZSk7XG4gIGlmIChwcm9wcy5tYXJrZXJzICYmIHByb3BzLm1hcmtlcnMubGVuZ3RoID4gMCkge1xuICAgIGFzdCA9IGFkZE1hcmtlcnMoYXN0LCB7XG4gICAgICBtYXJrZXJzOiBwcm9wcy5tYXJrZXJzXG4gICAgfSk7XG4gIH1cbiAgdmFyIHZhbHVlID0gYXN0Lmxlbmd0aCA9PT0gMCA/IHByb3BzLnZhbHVlIDogYXN0Lm1hcChtYXBDaGlsZHJlbi5kZXB0aCgwKSk7XG4gIHZhciBjb2RlID0gaCgnY29kZScsIGNvZGVQcm9wcywgdmFsdWUpO1xuICByZXR1cm4gcHJvcHMuaW5saW5lID8gY29kZSA6IGgoJ3ByZScsIHByZVByb3BzLCBjb2RlKTtcbn1cblJlZnJhY3Rvci5yZWdpc3Rlckxhbmd1YWdlID0gZnVuY3Rpb24gKGxhbmcpIHtcbiAgcmV0dXJuIGZyYWN0LnJlZ2lzdGVyKGxhbmcpO1xufTtcblJlZnJhY3Rvci5oYXNMYW5ndWFnZSA9IGZ1bmN0aW9uIChsYW5nKSB7XG4gIHJldHVybiBmcmFjdC5yZWdpc3RlcmVkKGxhbmcpO1xufTtcbm1vZHVsZS5leHBvcnRzID0gUmVmcmFjdG9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmVmcmFjdG9yLmpzLm1hcCJdLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJmcmFjdCIsIm1hcENoaWxkcmVuIiwiYWRkTWFya2VycyIsImgiLCJjcmVhdGVFbGVtZW50IiwiUmVmcmFjdG9yIiwicHJvcHMiLCJwcm9jZXNzIiwicmVnaXN0ZXJlZCIsImxhbmd1YWdlIiwiY29uc29sZSIsIndhcm4iLCJjb25jYXQiLCJsYW5nQ2xhc3NOYW1lIiwiY29kZVByb3BzIiwiY2xhc3NOYW1lIiwicHJlUHJvcHMiLCJmaWx0ZXIiLCJCb29sZWFuIiwiam9pbiIsImlubGluZSIsInN0eWxlIiwiZGlzcGxheSIsImFzdCIsImhpZ2hsaWdodCIsInZhbHVlIiwibWFya2VycyIsImxlbmd0aCIsIm1hcCIsImRlcHRoIiwiY29kZSIsInJlZ2lzdGVyTGFuZ3VhZ2UiLCJsYW5nIiwicmVnaXN0ZXIiLCJoYXNMYW5ndWFnZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-refractor/lib/Refractor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-refractor/lib/addMarkers.js":
/*!********************************************************!*\
  !*** ./node_modules/react-refractor/lib/addMarkers.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar filter = __webpack_require__(/*! unist-util-filter */ \"(ssr)/./node_modules/unist-util-filter/index.js\");\nvar visit = __webpack_require__(/*! unist-util-visit-parents */ \"(ssr)/./node_modules/unist-util-visit-parents/index.js\");\nvar NodeMap = __webpack_require__(/*! ./map */ \"(ssr)/./node_modules/react-refractor/lib/map.js\");\nfunction lineNumberify(ast) {\n    var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        lineNumber: 1\n    };\n    return ast.reduce(function(result, node) {\n        var lineStart = context.lineNumber;\n        if (node.type === \"text\") {\n            if (node.value.indexOf(\"\\n\") === -1) {\n                node.lineStart = lineStart;\n                node.lineEnd = lineStart;\n                result.nodes.push(node);\n                return result;\n            }\n            var lines = node.value.split(\"\\n\");\n            for(var i = 0; i < lines.length; i++){\n                var lineNum = i === 0 ? context.lineNumber : ++context.lineNumber;\n                result.nodes.push({\n                    type: \"text\",\n                    value: i === lines.length - 1 ? lines[i] : \"\".concat(lines[i], \"\\n\"),\n                    lineStart: lineNum,\n                    lineEnd: lineNum\n                });\n            }\n            result.lineNumber = context.lineNumber;\n            return result;\n        }\n        if (node.children) {\n            var processed = lineNumberify(node.children, context);\n            var firstChild = processed.nodes[0];\n            var lastChild = processed.nodes[processed.nodes.length - 1];\n            node.lineStart = firstChild ? firstChild.lineStart : lineStart;\n            node.lineEnd = lastChild ? lastChild.lineEnd : lineStart;\n            node.children = processed.nodes;\n            result.lineNumber = processed.lineNumber;\n            result.nodes.push(node);\n            return result;\n        }\n        result.nodes.push(node);\n        return result;\n    }, {\n        nodes: [],\n        lineNumber: context.lineNumber\n    });\n}\nfunction unwrapLine(markerLine, nodes) {\n    var tree = {\n        type: \"root\",\n        children: nodes\n    };\n    var headMap = new NodeMap();\n    var lineMap = new NodeMap();\n    var tailMap = new NodeMap();\n    var cloned = [];\n    function addCopy(map, node, ancestors) {\n        cloned.push(node);\n        ancestors.forEach(function(ancestor) {\n            if (!map.has(ancestor)) {\n                map.set(ancestor, Object.assign({}, ancestor, {\n                    children: []\n                }));\n                if (ancestor !== tree) {\n                    cloned.push(ancestor);\n                }\n            }\n        });\n        var i = ancestors.length;\n        while(i--){\n            var ancestor = map.get(ancestors[i]);\n            var child = ancestors[i + 1];\n            var leaf = map.get(child) || node;\n            if (ancestor.children.indexOf(leaf) === -1) {\n                ancestor.children.push(leaf);\n            }\n        }\n    }\n    visit(tree, function(node, ancestors) {\n        if (node.children) {\n            return;\n        }\n        // These nodes are on previous lines, but nested within the same structure\n        if (node.lineStart < markerLine) {\n            addCopy(headMap, node, ancestors);\n            return;\n        }\n        // These nodes are on the target line\n        if (node.lineStart === markerLine) {\n            addCopy(lineMap, node, ancestors);\n            return;\n        }\n        // If we have shared ancestors with some of the cloned elements,\n        // create another tree of the remaining nodes\n        if (node.lineEnd > markerLine && cloned.some(function(clone) {\n            return ancestors.indexOf(clone) !== -1;\n        })) {\n            addCopy(tailMap, node, ancestors);\n        }\n    });\n    // Get the remaining nodes - the ones who were not part of the same tree\n    var filtered = filter(tree, function(node) {\n        return cloned.indexOf(node) === -1;\n    });\n    var getChildren = function getChildren(map) {\n        var rootNode = map.get(tree);\n        if (!rootNode) {\n            return [];\n        }\n        visit(rootNode, function(leaf, ancestors) {\n            if (leaf.children) {\n                leaf.lineStart = 0;\n                leaf.lineEnd = 0;\n                return;\n            }\n            ancestors.forEach(function(ancestor) {\n                ancestor.lineStart = Math.max(ancestor.lineStart, leaf.lineStart);\n                ancestor.lineEnd = Math.max(ancestor.lineEnd, leaf.lineEnd);\n            });\n        });\n        return rootNode.children;\n    };\n    var merged = [].concat(getChildren(headMap), getChildren(lineMap), getChildren(tailMap), filtered ? filtered.children : []);\n    headMap.clear();\n    lineMap.clear();\n    tailMap.clear();\n    return merged;\n}\nfunction wrapBatch(children, marker, options) {\n    var className = marker.className || \"refractor-marker\";\n    return {\n        type: \"element\",\n        tagName: marker.component || \"div\",\n        properties: marker.component ? Object.assign({}, options, {\n            className: className\n        }) : {\n            className: className\n        },\n        children: children,\n        lineStart: marker.line,\n        lineEnd: children[children.length - 1].lineEnd,\n        isMarker: true\n    };\n}\nfunction wrapLines(treeNodes, markers, options) {\n    if (markers.length === 0 || treeNodes.length === 0) {\n        return treeNodes;\n    }\n    var ast = markers.reduce(function(acc, marker) {\n        return unwrapLine(marker.line, acc);\n    }, treeNodes);\n    // Container for the new AST\n    var wrapped = [];\n    // Note: Markers are already sorted by line number (ascending)\n    var astIndex = 0;\n    for(var m = 0; m < markers.length; m++){\n        var marker = markers[m];\n        // Start by eating all AST nodes with line numbers up to the given marker\n        for(var node = ast[astIndex]; node && node.lineEnd < marker.line; node = ast[++astIndex]){\n            wrapped.push(node);\n        }\n        // Now proceed to find all _contiguous_ nodes on the same line\n        var batch = [];\n        for(var _node = ast[astIndex]; _node && _node.lineEnd === marker.line; _node = ast[++astIndex]){\n            batch.push(_node);\n        }\n        // Now add that batch, if we have anything\n        if (batch.length > 0) {\n            wrapped.push(wrapBatch(batch, marker, options));\n        }\n    }\n    // Now add the remaining AST nodes\n    while(astIndex < ast.length){\n        wrapped.push(ast[astIndex++]);\n    }\n    return wrapped;\n}\nfunction addMarkers(ast, options) {\n    var markers = options.markers.map(function(marker) {\n        return marker.line ? marker : {\n            line: marker\n        };\n    }).sort(function(nodeA, nodeB) {\n        return nodeA.line - nodeB.line;\n    });\n    var numbered = lineNumberify(ast).nodes;\n    return wrapLines(numbered, markers, options);\n}\nmodule.exports = addMarkers; //# sourceMappingURL=addMarkers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-refractor/lib/addMarkers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-refractor/lib/map.js":
/*!*************************************************!*\
  !*** ./node_modules/react-refractor/lib/map.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\n/**\n * Weird \"map\" polyfill, that's weak if possible\n */ module.exports = typeof WeakMap === \"function\" ? HappyMap : SadMap;\n// Happy path! Fakes a `clear()` if possible (noop)\nfunction HappyMap() {\n    this.map = new WeakMap();\n}\nHappyMap.prototype.has = function(key) {\n    return this.map.has(key);\n};\nHappyMap.prototype.set = function(key, value) {\n    this.map.set(key, value);\n    return this;\n};\nHappyMap.prototype.get = function(key) {\n    return this.map.get(key);\n};\nHappyMap.prototype.clear = function() {\n// intentional noop, since we dont need to/cant clear\n};\n// Sad path! Use less stylish approach\nfunction SadMap() {\n    this.keys = [];\n    this.values = [];\n}\nSadMap.prototype.has = function(key) {\n    return this.keys.indexOf(key) !== -1;\n};\nSadMap.prototype.set = function(key, value) {\n    var index = this.keys.indexOf(key);\n    if (index === -1) {\n        this.keys.push(key);\n        this.values.push(value);\n    } else {\n        this.values[index] = value;\n    }\n    return this;\n};\nSadMap.prototype.get = function(key) {\n    var index = this.keys.indexOf(key);\n    return index === -1 ? undefined : this.values[index];\n};\nSadMap.prototype.clear = function() {\n    this.keys = [];\n    this.values = [];\n}; //# sourceMappingURL=map.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVmcmFjdG9yL2xpYi9tYXAuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYjs7Q0FFQyxHQUNEQSxPQUFPQyxPQUFPLEdBQUcsT0FBT0MsWUFBWSxhQUFhQyxXQUFXQztBQUU1RCxtREFBbUQ7QUFDbkQsU0FBU0Q7SUFDUCxJQUFJLENBQUNFLEdBQUcsR0FBRyxJQUFJSDtBQUNqQjtBQUNBQyxTQUFTRyxTQUFTLENBQUNDLEdBQUcsR0FBRyxTQUFVQyxHQUFHO0lBQ3BDLE9BQU8sSUFBSSxDQUFDSCxHQUFHLENBQUNFLEdBQUcsQ0FBQ0M7QUFDdEI7QUFDQUwsU0FBU0csU0FBUyxDQUFDRyxHQUFHLEdBQUcsU0FBVUQsR0FBRyxFQUFFRSxLQUFLO0lBQzNDLElBQUksQ0FBQ0wsR0FBRyxDQUFDSSxHQUFHLENBQUNELEtBQUtFO0lBQ2xCLE9BQU8sSUFBSTtBQUNiO0FBQ0FQLFNBQVNHLFNBQVMsQ0FBQ0ssR0FBRyxHQUFHLFNBQVVILEdBQUc7SUFDcEMsT0FBTyxJQUFJLENBQUNILEdBQUcsQ0FBQ00sR0FBRyxDQUFDSDtBQUN0QjtBQUNBTCxTQUFTRyxTQUFTLENBQUNNLEtBQUssR0FBRztBQUN6QixxREFBcUQ7QUFDdkQ7QUFFQSxzQ0FBc0M7QUFDdEMsU0FBU1I7SUFDUCxJQUFJLENBQUNTLElBQUksR0FBRyxFQUFFO0lBQ2QsSUFBSSxDQUFDQyxNQUFNLEdBQUcsRUFBRTtBQUNsQjtBQUNBVixPQUFPRSxTQUFTLENBQUNDLEdBQUcsR0FBRyxTQUFVQyxHQUFHO0lBQ2xDLE9BQU8sSUFBSSxDQUFDSyxJQUFJLENBQUNFLE9BQU8sQ0FBQ1AsU0FBUyxDQUFDO0FBQ3JDO0FBQ0FKLE9BQU9FLFNBQVMsQ0FBQ0csR0FBRyxHQUFHLFNBQVVELEdBQUcsRUFBRUUsS0FBSztJQUN6QyxJQUFJTSxRQUFRLElBQUksQ0FBQ0gsSUFBSSxDQUFDRSxPQUFPLENBQUNQO0lBQzlCLElBQUlRLFVBQVUsQ0FBQyxHQUFHO1FBQ2hCLElBQUksQ0FBQ0gsSUFBSSxDQUFDSSxJQUFJLENBQUNUO1FBQ2YsSUFBSSxDQUFDTSxNQUFNLENBQUNHLElBQUksQ0FBQ1A7SUFDbkIsT0FBTztRQUNMLElBQUksQ0FBQ0ksTUFBTSxDQUFDRSxNQUFNLEdBQUdOO0lBQ3ZCO0lBQ0EsT0FBTyxJQUFJO0FBQ2I7QUFDQU4sT0FBT0UsU0FBUyxDQUFDSyxHQUFHLEdBQUcsU0FBVUgsR0FBRztJQUNsQyxJQUFJUSxRQUFRLElBQUksQ0FBQ0gsSUFBSSxDQUFDRSxPQUFPLENBQUNQO0lBQzlCLE9BQU9RLFVBQVUsQ0FBQyxJQUFJRSxZQUFZLElBQUksQ0FBQ0osTUFBTSxDQUFDRSxNQUFNO0FBQ3REO0FBQ0FaLE9BQU9FLFNBQVMsQ0FBQ00sS0FBSyxHQUFHO0lBQ3ZCLElBQUksQ0FBQ0MsSUFBSSxHQUFHLEVBQUU7SUFDZCxJQUFJLENBQUNDLE1BQU0sR0FBRyxFQUFFO0FBQ2xCLEdBQ0EsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGxpcGxpOS1wYXJhbm9ybWFsLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZnJhY3Rvci9saWIvbWFwLmpzPzQ1MmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogV2VpcmQgXCJtYXBcIiBwb2x5ZmlsbCwgdGhhdCdzIHdlYWsgaWYgcG9zc2libGVcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyA/IEhhcHB5TWFwIDogU2FkTWFwO1xuXG4vLyBIYXBweSBwYXRoISBGYWtlcyBhIGBjbGVhcigpYCBpZiBwb3NzaWJsZSAobm9vcClcbmZ1bmN0aW9uIEhhcHB5TWFwKCkge1xuICB0aGlzLm1hcCA9IG5ldyBXZWFrTWFwKCk7XG59XG5IYXBweU1hcC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gdGhpcy5tYXAuaGFzKGtleSk7XG59O1xuSGFwcHlNYXAucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHRoaXMubWFwLnNldChrZXksIHZhbHVlKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuSGFwcHlNYXAucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHRoaXMubWFwLmdldChrZXkpO1xufTtcbkhhcHB5TWFwLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gaW50ZW50aW9uYWwgbm9vcCwgc2luY2Ugd2UgZG9udCBuZWVkIHRvL2NhbnQgY2xlYXJcbn07XG5cbi8vIFNhZCBwYXRoISBVc2UgbGVzcyBzdHlsaXNoIGFwcHJvYWNoXG5mdW5jdGlvbiBTYWRNYXAoKSB7XG4gIHRoaXMua2V5cyA9IFtdO1xuICB0aGlzLnZhbHVlcyA9IFtdO1xufVxuU2FkTWFwLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiB0aGlzLmtleXMuaW5kZXhPZihrZXkpICE9PSAtMTtcbn07XG5TYWRNYXAucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHZhciBpbmRleCA9IHRoaXMua2V5cy5pbmRleE9mKGtleSk7XG4gIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICB0aGlzLmtleXMucHVzaChrZXkpO1xuICAgIHRoaXMudmFsdWVzLnB1c2godmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMudmFsdWVzW2luZGV4XSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblNhZE1hcC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSkge1xuICB2YXIgaW5kZXggPSB0aGlzLmtleXMuaW5kZXhPZihrZXkpO1xuICByZXR1cm4gaW5kZXggPT09IC0xID8gdW5kZWZpbmVkIDogdGhpcy52YWx1ZXNbaW5kZXhdO1xufTtcblNhZE1hcC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMua2V5cyA9IFtdO1xuICB0aGlzLnZhbHVlcyA9IFtdO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcC5qcy5tYXAiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIldlYWtNYXAiLCJIYXBweU1hcCIsIlNhZE1hcCIsIm1hcCIsInByb3RvdHlwZSIsImhhcyIsImtleSIsInNldCIsInZhbHVlIiwiZ2V0IiwiY2xlYXIiLCJrZXlzIiwidmFsdWVzIiwiaW5kZXhPZiIsImluZGV4IiwicHVzaCIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-refractor/lib/map.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-refractor/lib/mapChildren.js":
/*!*********************************************************!*\
  !*** ./node_modules/react-refractor/lib/mapChildren.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nfunction mapChild(child, i, depth) {\n    if (child.tagName) {\n        var className = child.properties && Array.isArray(child.properties.className) ? child.properties.className.join(\" \") : child.properties.className;\n        return React.createElement(child.tagName, Object.assign({\n            key: \"fract-\".concat(depth, \"-\").concat(i)\n        }, child.properties, {\n            className: className\n        }), child.children && child.children.map(mapWithDepth(depth + 1)));\n    }\n    return child.value;\n}\nfunction mapWithDepth(depth) {\n    return function mapChildrenWithDepth(child, i) {\n        return mapChild(child, i, depth);\n    };\n}\nexports.depth = mapWithDepth; //# sourceMappingURL=mapChildren.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVmcmFjdG9yL2xpYi9tYXBDaGlsZHJlbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLElBQUlBLFFBQVFDLG1CQUFPQSxDQUFDO0FBQ3BCLFNBQVNDLFNBQVNDLEtBQUssRUFBRUMsQ0FBQyxFQUFFQyxLQUFLO0lBQy9CLElBQUlGLE1BQU1HLE9BQU8sRUFBRTtRQUNqQixJQUFJQyxZQUFZSixNQUFNSyxVQUFVLElBQUlDLE1BQU1DLE9BQU8sQ0FBQ1AsTUFBTUssVUFBVSxDQUFDRCxTQUFTLElBQUlKLE1BQU1LLFVBQVUsQ0FBQ0QsU0FBUyxDQUFDSSxJQUFJLENBQUMsT0FBT1IsTUFBTUssVUFBVSxDQUFDRCxTQUFTO1FBQ2pKLE9BQU9QLE1BQU1ZLGFBQWEsQ0FBQ1QsTUFBTUcsT0FBTyxFQUFFTyxPQUFPQyxNQUFNLENBQUM7WUFDdERDLEtBQUssU0FBU0MsTUFBTSxDQUFDWCxPQUFPLEtBQUtXLE1BQU0sQ0FBQ1o7UUFDMUMsR0FBR0QsTUFBTUssVUFBVSxFQUFFO1lBQ25CRCxXQUFXQTtRQUNiLElBQUlKLE1BQU1jLFFBQVEsSUFBSWQsTUFBTWMsUUFBUSxDQUFDQyxHQUFHLENBQUNDLGFBQWFkLFFBQVE7SUFDaEU7SUFDQSxPQUFPRixNQUFNaUIsS0FBSztBQUNwQjtBQUNBLFNBQVNELGFBQWFkLEtBQUs7SUFDekIsT0FBTyxTQUFTZ0IscUJBQXFCbEIsS0FBSyxFQUFFQyxDQUFDO1FBQzNDLE9BQU9GLFNBQVNDLE9BQU9DLEdBQUdDO0lBQzVCO0FBQ0Y7QUFDQWlCLGFBQWEsR0FBR0gsY0FDaEIsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGxpcGxpOS1wYXJhbm9ybWFsLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZnJhY3Rvci9saWIvbWFwQ2hpbGRyZW4uanM/NjA4NiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmZ1bmN0aW9uIG1hcENoaWxkKGNoaWxkLCBpLCBkZXB0aCkge1xuICBpZiAoY2hpbGQudGFnTmFtZSkge1xuICAgIHZhciBjbGFzc05hbWUgPSBjaGlsZC5wcm9wZXJ0aWVzICYmIEFycmF5LmlzQXJyYXkoY2hpbGQucHJvcGVydGllcy5jbGFzc05hbWUpID8gY2hpbGQucHJvcGVydGllcy5jbGFzc05hbWUuam9pbignICcpIDogY2hpbGQucHJvcGVydGllcy5jbGFzc05hbWU7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY2hpbGQudGFnTmFtZSwgT2JqZWN0LmFzc2lnbih7XG4gICAgICBrZXk6IFwiZnJhY3QtXCIuY29uY2F0KGRlcHRoLCBcIi1cIikuY29uY2F0KGkpXG4gICAgfSwgY2hpbGQucHJvcGVydGllcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVcbiAgICB9KSwgY2hpbGQuY2hpbGRyZW4gJiYgY2hpbGQuY2hpbGRyZW4ubWFwKG1hcFdpdGhEZXB0aChkZXB0aCArIDEpKSk7XG4gIH1cbiAgcmV0dXJuIGNoaWxkLnZhbHVlO1xufVxuZnVuY3Rpb24gbWFwV2l0aERlcHRoKGRlcHRoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBtYXBDaGlsZHJlbldpdGhEZXB0aChjaGlsZCwgaSkge1xuICAgIHJldHVybiBtYXBDaGlsZChjaGlsZCwgaSwgZGVwdGgpO1xuICB9O1xufVxuZXhwb3J0cy5kZXB0aCA9IG1hcFdpdGhEZXB0aDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcENoaWxkcmVuLmpzLm1hcCJdLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJtYXBDaGlsZCIsImNoaWxkIiwiaSIsImRlcHRoIiwidGFnTmFtZSIsImNsYXNzTmFtZSIsInByb3BlcnRpZXMiLCJBcnJheSIsImlzQXJyYXkiLCJqb2luIiwiY3JlYXRlRWxlbWVudCIsIk9iamVjdCIsImFzc2lnbiIsImtleSIsImNvbmNhdCIsImNoaWxkcmVuIiwibWFwIiwibWFwV2l0aERlcHRoIiwidmFsdWUiLCJtYXBDaGlsZHJlbldpdGhEZXB0aCIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-refractor/lib/mapChildren.js\n");

/***/ })

};
;