/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-compiler-runtime";
exports.ids = ["vendor-chunks/react-compiler-runtime"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-compiler-runtime/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-compiler-runtime/dist/index.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @lightSyntaxTransform\n * @noflow\n * @nolint\n * @preventMunge\n * @preserve-invariant-messages\n */ \"use no memo\";\n\"use strict\";\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar index_exports = {};\n__export(index_exports, {\n    $dispatcherGuard: ()=>$dispatcherGuard,\n    $makeReadOnly: ()=>$makeReadOnly,\n    $reset: ()=>$reset,\n    $structuralCheck: ()=>$structuralCheck,\n    c: ()=>c,\n    clearRenderCounterRegistry: ()=>clearRenderCounterRegistry,\n    renderCounterRegistry: ()=>renderCounterRegistry,\n    useRenderCounter: ()=>useRenderCounter\n});\nmodule.exports = __toCommonJS(index_exports);\nvar React = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar { useRef, useEffect, isValidElement } = React;\nvar _a;\nvar ReactSecretInternals = //@ts-ignore\n(_a = React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE) != null ? _a : React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\nvar $empty = Symbol.for(\"react.memo_cache_sentinel\");\nvar _a2;\nvar c = // @ts-expect-error\ntypeof ((_a2 = React.__COMPILER_RUNTIME) == null ? void 0 : _a2.c) === \"function\" ? // @ts-expect-error\nReact.__COMPILER_RUNTIME.c : function c2(size) {\n    return React.useMemo(()=>{\n        const $ = new Array(size);\n        for(let ii = 0; ii < size; ii++){\n            $[ii] = $empty;\n        }\n        $[$empty] = true;\n        return $;\n    }, []);\n};\nvar LazyGuardDispatcher = {};\n[\n    \"readContext\",\n    \"useCallback\",\n    \"useContext\",\n    \"useEffect\",\n    \"useImperativeHandle\",\n    \"useInsertionEffect\",\n    \"useLayoutEffect\",\n    \"useMemo\",\n    \"useReducer\",\n    \"useRef\",\n    \"useState\",\n    \"useDebugValue\",\n    \"useDeferredValue\",\n    \"useTransition\",\n    \"useMutableSource\",\n    \"useSyncExternalStore\",\n    \"useId\",\n    \"unstable_isNewReconciler\",\n    \"getCacheSignal\",\n    \"getCacheForType\",\n    \"useCacheRefresh\"\n].forEach((name)=>{\n    LazyGuardDispatcher[name] = ()=>{\n        throw new Error(`[React] Unexpected React hook call (${name}) from a React compiled function. Check that all hooks are called directly and named according to convention ('use[A-Z]') `);\n    };\n});\nvar originalDispatcher = null;\nLazyGuardDispatcher[\"useMemoCache\"] = (count)=>{\n    if (originalDispatcher == null) {\n        throw new Error(\"React Compiler internal invariant violation: unexpected null dispatcher\");\n    } else {\n        return originalDispatcher.useMemoCache(count);\n    }\n};\nfunction setCurrent(newDispatcher) {\n    ReactSecretInternals.ReactCurrentDispatcher.current = newDispatcher;\n    return ReactSecretInternals.ReactCurrentDispatcher.current;\n}\nvar guardFrames = [];\nfunction $dispatcherGuard(kind) {\n    const curr = ReactSecretInternals.ReactCurrentDispatcher.current;\n    if (kind === 0 /* PushGuardContext */ ) {\n        guardFrames.push(curr);\n        if (guardFrames.length === 1) {\n            originalDispatcher = curr;\n        }\n        if (curr === LazyGuardDispatcher) {\n            throw new Error(`[React] Unexpected call to custom hook or component from a React compiled function. Check that (1) all hooks are called directly and named according to convention ('use[A-Z]') and (2) components are returned as JSX instead of being directly invoked.`);\n        }\n        setCurrent(LazyGuardDispatcher);\n    } else if (kind === 1 /* PopGuardContext */ ) {\n        const lastFrame = guardFrames.pop();\n        if (lastFrame == null) {\n            throw new Error(\"React Compiler internal error: unexpected null in guard stack\");\n        }\n        if (guardFrames.length === 0) {\n            originalDispatcher = null;\n        }\n        setCurrent(lastFrame);\n    } else if (kind === 2 /* PushExpectHook */ ) {\n        guardFrames.push(curr);\n        setCurrent(originalDispatcher);\n    } else if (kind === 3 /* PopExpectHook */ ) {\n        const lastFrame = guardFrames.pop();\n        if (lastFrame == null) {\n            throw new Error(\"React Compiler internal error: unexpected null in guard stack\");\n        }\n        setCurrent(lastFrame);\n    } else {\n        throw new Error(\"React Compiler internal error: unreachable block\" + kind);\n    }\n}\nfunction $reset($) {\n    for(let ii = 0; ii < $.length; ii++){\n        $[ii] = $empty;\n    }\n}\nfunction $makeReadOnly() {\n    throw new Error(\"TODO: implement $makeReadOnly in react-compiler-runtime\");\n}\nvar renderCounterRegistry = /* @__PURE__ */ new Map();\nfunction clearRenderCounterRegistry() {\n    for (const counters of renderCounterRegistry.values()){\n        counters.forEach((counter)=>{\n            counter.count = 0;\n        });\n    }\n}\nfunction registerRenderCounter(name, val) {\n    let counters = renderCounterRegistry.get(name);\n    if (counters == null) {\n        counters = /* @__PURE__ */ new Set();\n        renderCounterRegistry.set(name, counters);\n    }\n    counters.add(val);\n}\nfunction removeRenderCounter(name, val) {\n    const counters = renderCounterRegistry.get(name);\n    if (counters == null) {\n        return;\n    }\n    counters.delete(val);\n}\nfunction useRenderCounter(name) {\n    const val = useRef(null);\n    if (val.current != null) {\n        val.current.count += 1;\n    }\n    useEffect(()=>{\n        if (val.current == null) {\n            const counter = {\n                count: 0\n            };\n            registerRenderCounter(name, counter);\n            val.current = counter;\n        }\n        return ()=>{\n            if (val.current !== null) {\n                removeRenderCounter(name, val.current);\n            }\n        };\n    });\n}\nvar seenErrors = /* @__PURE__ */ new Set();\nfunction $structuralCheck(oldValue, newValue, variableName, fnName, kind, loc) {\n    function error(l, r, path, depth) {\n        const str = `${fnName}:${loc} [${kind}] ${variableName}${path} changed from ${l} to ${r} at depth ${depth}`;\n        if (seenErrors.has(str)) {\n            return;\n        }\n        seenErrors.add(str);\n        console.error(str);\n    }\n    const depthLimit = 2;\n    function recur(oldValue2, newValue2, path, depth) {\n        if (depth > depthLimit) {\n            return;\n        } else if (oldValue2 === newValue2) {\n            return;\n        } else if (typeof oldValue2 !== typeof newValue2) {\n            error(`type ${typeof oldValue2}`, `type ${typeof newValue2}`, path, depth);\n        } else if (typeof oldValue2 === \"object\") {\n            const oldArray = Array.isArray(oldValue2);\n            const newArray = Array.isArray(newValue2);\n            if (oldValue2 === null && newValue2 !== null) {\n                error(\"null\", `type ${typeof newValue2}`, path, depth);\n            } else if (newValue2 === null) {\n                error(`type ${typeof oldValue2}`, \"null\", path, depth);\n            } else if (oldValue2 instanceof Map) {\n                if (!(newValue2 instanceof Map)) {\n                    error(`Map instance`, `other value`, path, depth);\n                } else if (oldValue2.size !== newValue2.size) {\n                    error(`Map instance with size ${oldValue2.size}`, `Map instance with size ${newValue2.size}`, path, depth);\n                } else {\n                    for (const [k, v] of oldValue2){\n                        if (!newValue2.has(k)) {\n                            error(`Map instance with key ${k}`, `Map instance without key ${k}`, path, depth);\n                        } else {\n                            recur(v, newValue2.get(k), `${path}.get(${k})`, depth + 1);\n                        }\n                    }\n                }\n            } else if (newValue2 instanceof Map) {\n                error(\"other value\", `Map instance`, path, depth);\n            } else if (oldValue2 instanceof Set) {\n                if (!(newValue2 instanceof Set)) {\n                    error(`Set instance`, `other value`, path, depth);\n                } else if (oldValue2.size !== newValue2.size) {\n                    error(`Set instance with size ${oldValue2.size}`, `Set instance with size ${newValue2.size}`, path, depth);\n                } else {\n                    for (const v of newValue2){\n                        if (!oldValue2.has(v)) {\n                            error(`Set instance without element ${v}`, `Set instance with element ${v}`, path, depth);\n                        }\n                    }\n                }\n            } else if (newValue2 instanceof Set) {\n                error(\"other value\", `Set instance`, path, depth);\n            } else if (oldArray || newArray) {\n                if (oldArray !== newArray) {\n                    error(`type ${oldArray ? \"array\" : \"object\"}`, `type ${newArray ? \"array\" : \"object\"}`, path, depth);\n                } else if (oldValue2.length !== newValue2.length) {\n                    error(`array with length ${oldValue2.length}`, `array with length ${newValue2.length}`, path, depth);\n                } else {\n                    for(let ii = 0; ii < oldValue2.length; ii++){\n                        recur(oldValue2[ii], newValue2[ii], `${path}[${ii}]`, depth + 1);\n                    }\n                }\n            } else if (isValidElement(oldValue2) || isValidElement(newValue2)) {\n                if (isValidElement(oldValue2) !== isValidElement(newValue2)) {\n                    error(`type ${isValidElement(oldValue2) ? \"React element\" : \"object\"}`, `type ${isValidElement(newValue2) ? \"React element\" : \"object\"}`, path, depth);\n                } else if (oldValue2.type !== newValue2.type) {\n                    error(`React element of type ${oldValue2.type}`, `React element of type ${newValue2.type}`, path, depth);\n                } else {\n                    recur(oldValue2.props, newValue2.props, `[props of ${path}]`, depth + 1);\n                }\n            } else {\n                for(const key in newValue2){\n                    if (!(key in oldValue2)) {\n                        error(`object without key ${key}`, `object with key ${key}`, path, depth);\n                    }\n                }\n                for(const key in oldValue2){\n                    if (!(key in newValue2)) {\n                        error(`object with key ${key}`, `object without key ${key}`, path, depth);\n                    } else {\n                        recur(oldValue2[key], newValue2[key], `${path}.${key}`, depth + 1);\n                    }\n                }\n            }\n        } else if (typeof oldValue2 === \"function\") {\n            return;\n        } else if (isNaN(oldValue2) || isNaN(newValue2)) {\n            if (isNaN(oldValue2) !== isNaN(newValue2)) {\n                error(`${isNaN(oldValue2) ? \"NaN\" : \"non-NaN value\"}`, `${isNaN(newValue2) ? \"NaN\" : \"non-NaN value\"}`, path, depth);\n            }\n        } else if (oldValue2 !== newValue2) {\n            error(oldValue2, newValue2, path, depth);\n        }\n    }\n    recur(oldValue, newValue, \"\", 0);\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-compiler-runtime/dist/index.js\n");

/***/ })

};
;