"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/refractor";
exports.ids = ["vendor-chunks/refractor"];
exports.modules = {

/***/ "(ssr)/./node_modules/refractor/core.js":
/*!****************************************!*\
  !*** ./node_modules/refractor/core.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/* global window, self */ // istanbul ignore next - Don't allow Prism to run on page load in browser or\n// to start messaging from workers.\nvar ctx = typeof globalThis === \"object\" ? globalThis : typeof self === \"object\" ? self :  false ? 0 : typeof global === \"object\" ? global : {};\nvar restore = capture();\nctx.Prism = {\n    manual: true,\n    disableWorkerMessageHandler: true\n};\n// Load all stuff in `prism.js` itself, except for `prism-file-highlight.js`.\n// The wrapped non-leaky grammars are loaded instead of Prismâ€™s originals.\nvar h = __webpack_require__(/*! hastscript */ \"(ssr)/./node_modules/hastscript/index.js\");\nvar decode = __webpack_require__(/*! parse-entities */ \"(ssr)/./node_modules/parse-entities/index.js\");\nvar Prism = __webpack_require__(/*! prismjs/components/prism-core */ \"(ssr)/./node_modules/prismjs/components/prism-core.js\");\nvar markup = __webpack_require__(/*! ./lang/markup */ \"(ssr)/./node_modules/refractor/lang/markup.js\");\nvar css = __webpack_require__(/*! ./lang/css */ \"(ssr)/./node_modules/refractor/lang/css.js\");\nvar clike = __webpack_require__(/*! ./lang/clike */ \"(ssr)/./node_modules/refractor/lang/clike.js\");\nvar js = __webpack_require__(/*! ./lang/javascript */ \"(ssr)/./node_modules/refractor/lang/javascript.js\");\nrestore();\nvar own = {}.hasOwnProperty;\n// Inherit.\nfunction Refractor() {}\nRefractor.prototype = Prism;\n// Construct.\nvar refract = new Refractor();\n// Expose.\nmodule.exports = refract;\n// Create.\nrefract.highlight = highlight;\nrefract.register = register;\nrefract.alias = alias;\nrefract.registered = registered;\nrefract.listLanguages = listLanguages;\n// Register bundled grammars.\nregister(markup);\nregister(css);\nregister(clike);\nregister(js);\nrefract.util.encode = encode;\nrefract.Token.stringify = stringify;\nfunction register(grammar) {\n    if (typeof grammar !== \"function\" || !grammar.displayName) {\n        throw new Error(\"Expected `function` for `grammar`, got `\" + grammar + \"`\");\n    }\n    // Do not duplicate registrations.\n    if (refract.languages[grammar.displayName] === undefined) {\n        grammar(refract);\n    }\n}\nfunction alias(name, alias) {\n    var languages = refract.languages;\n    var map = name;\n    var key;\n    var list;\n    var length;\n    var index;\n    if (alias) {\n        map = {};\n        map[name] = alias;\n    }\n    for(key in map){\n        list = map[key];\n        list = typeof list === \"string\" ? [\n            list\n        ] : list;\n        length = list.length;\n        index = -1;\n        while(++index < length){\n            languages[list[index]] = languages[key];\n        }\n    }\n}\nfunction highlight(value, name) {\n    var sup = Prism.highlight;\n    var grammar;\n    if (typeof value !== \"string\") {\n        throw new Error(\"Expected `string` for `value`, got `\" + value + \"`\");\n    }\n    // `name` is a grammar object.\n    if (refract.util.type(name) === \"Object\") {\n        grammar = name;\n        name = null;\n    } else {\n        if (typeof name !== \"string\") {\n            throw new Error(\"Expected `string` for `name`, got `\" + name + \"`\");\n        }\n        if (own.call(refract.languages, name)) {\n            grammar = refract.languages[name];\n        } else {\n            throw new Error(\"Unknown language: `\" + name + \"` is not registered\");\n        }\n    }\n    return sup.call(this, value, grammar, name);\n}\nfunction registered(language) {\n    if (typeof language !== \"string\") {\n        throw new Error(\"Expected `string` for `language`, got `\" + language + \"`\");\n    }\n    return own.call(refract.languages, language);\n}\nfunction listLanguages() {\n    var languages = refract.languages;\n    var list = [];\n    var language;\n    for(language in languages){\n        if (own.call(languages, language) && typeof languages[language] === \"object\") {\n            list.push(language);\n        }\n    }\n    return list;\n}\nfunction stringify(value, language, parent) {\n    var env;\n    if (typeof value === \"string\") {\n        return {\n            type: \"text\",\n            value: value\n        };\n    }\n    if (refract.util.type(value) === \"Array\") {\n        return stringifyAll(value, language);\n    }\n    env = {\n        type: value.type,\n        content: refract.Token.stringify(value.content, language, parent),\n        tag: \"span\",\n        classes: [\n            \"token\",\n            value.type\n        ],\n        attributes: {},\n        language: language,\n        parent: parent\n    };\n    if (value.alias) {\n        env.classes = env.classes.concat(value.alias);\n    }\n    refract.hooks.run(\"wrap\", env);\n    return h(env.tag + \".\" + env.classes.join(\".\"), attributes(env.attributes), env.content);\n}\nfunction stringifyAll(values, language) {\n    var result = [];\n    var length = values.length;\n    var index = -1;\n    var value;\n    while(++index < length){\n        value = values[index];\n        if (value !== \"\" && value !== null && value !== undefined) {\n            result.push(value);\n        }\n    }\n    index = -1;\n    length = result.length;\n    while(++index < length){\n        value = result[index];\n        result[index] = refract.Token.stringify(value, language, result);\n    }\n    return result;\n}\nfunction encode(tokens) {\n    return tokens;\n}\nfunction attributes(attrs) {\n    var key;\n    for(key in attrs){\n        attrs[key] = decode(attrs[key]);\n    }\n    return attrs;\n}\nfunction capture() {\n    var defined = \"Prism\" in ctx;\n    /* istanbul ignore next */ var current = defined ? ctx.Prism : undefined;\n    return restore;\n    function restore() {\n        /* istanbul ignore else - Clean leaks after Prism. */ if (defined) {\n            ctx.Prism = current;\n        } else {\n            delete ctx.Prism;\n        }\n        defined = undefined;\n        current = undefined;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFPQTtBQUNUO0FBRUEsU0FBU1AsV0FBV1EsS0FBSztJQUN2QixJQUFJeEI7SUFFSixJQUFLQSxPQUFPd0IsTUFBTztRQUNqQkEsS0FBSyxDQUFDeEIsSUFBSSxHQUFHNUIsT0FBT29ELEtBQUssQ0FBQ3hCLElBQUk7SUFDaEM7SUFFQSxPQUFPd0I7QUFDVDtBQUVBLFNBQVMxRDtJQUNQLElBQUkyRCxVQUFVLFdBQVdqRTtJQUN6Qix3QkFBd0IsR0FDeEIsSUFBSWtFLFVBQVVELFVBQVVqRSxJQUFJTyxLQUFLLEdBQUc4QjtJQUVwQyxPQUFPaEM7SUFFUCxTQUFTQTtRQUNQLG1EQUFtRCxHQUNuRCxJQUFJNEQsU0FBUztZQUNYakUsSUFBSU8sS0FBSyxHQUFHMkQ7UUFDZCxPQUFPO1lBQ0wsT0FBT2xFLElBQUlPLEtBQUs7UUFDbEI7UUFFQTBELFVBQVU1QjtRQUNWNkIsVUFBVTdCO0lBQ1o7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3BsaXBsaTktcGFyYW5vcm1hbC8uL25vZGVfbW9kdWxlcy9yZWZyYWN0b3IvY29yZS5qcz9jYTk1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG4vKiBnbG9iYWwgd2luZG93LCBzZWxmICovXG5cbi8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0IC0gRG9uJ3QgYWxsb3cgUHJpc20gdG8gcnVuIG9uIHBhZ2UgbG9hZCBpbiBicm93c2VyIG9yXG4vLyB0byBzdGFydCBtZXNzYWdpbmcgZnJvbSB3b3JrZXJzLlxudmFyIGN0eCA9XG4gIHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0J1xuICAgID8gZ2xvYmFsVGhpc1xuICAgIDogdHlwZW9mIHNlbGYgPT09ICdvYmplY3QnXG4gICAgPyBzZWxmXG4gICAgOiB0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0J1xuICAgID8gd2luZG93XG4gICAgOiB0eXBlb2YgZ2xvYmFsID09PSAnb2JqZWN0J1xuICAgID8gZ2xvYmFsXG4gICAgOiB7fVxuXG52YXIgcmVzdG9yZSA9IGNhcHR1cmUoKVxuXG5jdHguUHJpc20gPSB7bWFudWFsOiB0cnVlLCBkaXNhYmxlV29ya2VyTWVzc2FnZUhhbmRsZXI6IHRydWV9XG5cbi8vIExvYWQgYWxsIHN0dWZmIGluIGBwcmlzbS5qc2AgaXRzZWxmLCBleGNlcHQgZm9yIGBwcmlzbS1maWxlLWhpZ2hsaWdodC5qc2AuXG4vLyBUaGUgd3JhcHBlZCBub24tbGVha3kgZ3JhbW1hcnMgYXJlIGxvYWRlZCBpbnN0ZWFkIG9mIFByaXNt4oCZcyBvcmlnaW5hbHMuXG52YXIgaCA9IHJlcXVpcmUoJ2hhc3RzY3JpcHQnKVxudmFyIGRlY29kZSA9IHJlcXVpcmUoJ3BhcnNlLWVudGl0aWVzJylcbnZhciBQcmlzbSA9IHJlcXVpcmUoJ3ByaXNtanMvY29tcG9uZW50cy9wcmlzbS1jb3JlJylcbnZhciBtYXJrdXAgPSByZXF1aXJlKCcuL2xhbmcvbWFya3VwJylcbnZhciBjc3MgPSByZXF1aXJlKCcuL2xhbmcvY3NzJylcbnZhciBjbGlrZSA9IHJlcXVpcmUoJy4vbGFuZy9jbGlrZScpXG52YXIganMgPSByZXF1aXJlKCcuL2xhbmcvamF2YXNjcmlwdCcpXG5cbnJlc3RvcmUoKVxuXG52YXIgb3duID0ge30uaGFzT3duUHJvcGVydHlcblxuLy8gSW5oZXJpdC5cbmZ1bmN0aW9uIFJlZnJhY3RvcigpIHt9XG5cblJlZnJhY3Rvci5wcm90b3R5cGUgPSBQcmlzbVxuXG4vLyBDb25zdHJ1Y3QuXG52YXIgcmVmcmFjdCA9IG5ldyBSZWZyYWN0b3IoKVxuXG4vLyBFeHBvc2UuXG5tb2R1bGUuZXhwb3J0cyA9IHJlZnJhY3RcblxuLy8gQ3JlYXRlLlxucmVmcmFjdC5oaWdobGlnaHQgPSBoaWdobGlnaHRcbnJlZnJhY3QucmVnaXN0ZXIgPSByZWdpc3RlclxucmVmcmFjdC5hbGlhcyA9IGFsaWFzXG5yZWZyYWN0LnJlZ2lzdGVyZWQgPSByZWdpc3RlcmVkXG5yZWZyYWN0Lmxpc3RMYW5ndWFnZXMgPSBsaXN0TGFuZ3VhZ2VzXG5cbi8vIFJlZ2lzdGVyIGJ1bmRsZWQgZ3JhbW1hcnMuXG5yZWdpc3RlcihtYXJrdXApXG5yZWdpc3Rlcihjc3MpXG5yZWdpc3RlcihjbGlrZSlcbnJlZ2lzdGVyKGpzKVxuXG5yZWZyYWN0LnV0aWwuZW5jb2RlID0gZW5jb2RlXG5yZWZyYWN0LlRva2VuLnN0cmluZ2lmeSA9IHN0cmluZ2lmeVxuXG5mdW5jdGlvbiByZWdpc3RlcihncmFtbWFyKSB7XG4gIGlmICh0eXBlb2YgZ3JhbW1hciAhPT0gJ2Z1bmN0aW9uJyB8fCAhZ3JhbW1hci5kaXNwbGF5TmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgYGZ1bmN0aW9uYCBmb3IgYGdyYW1tYXJgLCBnb3QgYCcgKyBncmFtbWFyICsgJ2AnKVxuICB9XG5cbiAgLy8gRG8gbm90IGR1cGxpY2F0ZSByZWdpc3RyYXRpb25zLlxuICBpZiAocmVmcmFjdC5sYW5ndWFnZXNbZ3JhbW1hci5kaXNwbGF5TmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgIGdyYW1tYXIocmVmcmFjdClcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGlhcyhuYW1lLCBhbGlhcykge1xuICB2YXIgbGFuZ3VhZ2VzID0gcmVmcmFjdC5sYW5ndWFnZXNcbiAgdmFyIG1hcCA9IG5hbWVcbiAgdmFyIGtleVxuICB2YXIgbGlzdFxuICB2YXIgbGVuZ3RoXG4gIHZhciBpbmRleFxuXG4gIGlmIChhbGlhcykge1xuICAgIG1hcCA9IHt9XG4gICAgbWFwW25hbWVdID0gYWxpYXNcbiAgfVxuXG4gIGZvciAoa2V5IGluIG1hcCkge1xuICAgIGxpc3QgPSBtYXBba2V5XVxuICAgIGxpc3QgPSB0eXBlb2YgbGlzdCA9PT0gJ3N0cmluZycgPyBbbGlzdF0gOiBsaXN0XG4gICAgbGVuZ3RoID0gbGlzdC5sZW5ndGhcbiAgICBpbmRleCA9IC0xXG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgbGFuZ3VhZ2VzW2xpc3RbaW5kZXhdXSA9IGxhbmd1YWdlc1trZXldXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGhpZ2hsaWdodCh2YWx1ZSwgbmFtZSkge1xuICB2YXIgc3VwID0gUHJpc20uaGlnaGxpZ2h0XG4gIHZhciBncmFtbWFyXG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGBzdHJpbmdgIGZvciBgdmFsdWVgLCBnb3QgYCcgKyB2YWx1ZSArICdgJylcbiAgfVxuXG4gIC8vIGBuYW1lYCBpcyBhIGdyYW1tYXIgb2JqZWN0LlxuICBpZiAocmVmcmFjdC51dGlsLnR5cGUobmFtZSkgPT09ICdPYmplY3QnKSB7XG4gICAgZ3JhbW1hciA9IG5hbWVcbiAgICBuYW1lID0gbnVsbFxuICB9IGVsc2Uge1xuICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgYHN0cmluZ2AgZm9yIGBuYW1lYCwgZ290IGAnICsgbmFtZSArICdgJylcbiAgICB9XG5cbiAgICBpZiAob3duLmNhbGwocmVmcmFjdC5sYW5ndWFnZXMsIG5hbWUpKSB7XG4gICAgICBncmFtbWFyID0gcmVmcmFjdC5sYW5ndWFnZXNbbmFtZV1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGxhbmd1YWdlOiBgJyArIG5hbWUgKyAnYCBpcyBub3QgcmVnaXN0ZXJlZCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN1cC5jYWxsKHRoaXMsIHZhbHVlLCBncmFtbWFyLCBuYW1lKVxufVxuXG5mdW5jdGlvbiByZWdpc3RlcmVkKGxhbmd1YWdlKSB7XG4gIGlmICh0eXBlb2YgbGFuZ3VhZ2UgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBgc3RyaW5nYCBmb3IgYGxhbmd1YWdlYCwgZ290IGAnICsgbGFuZ3VhZ2UgKyAnYCcpXG4gIH1cblxuICByZXR1cm4gb3duLmNhbGwocmVmcmFjdC5sYW5ndWFnZXMsIGxhbmd1YWdlKVxufVxuXG5mdW5jdGlvbiBsaXN0TGFuZ3VhZ2VzKCkge1xuICB2YXIgbGFuZ3VhZ2VzID0gcmVmcmFjdC5sYW5ndWFnZXNcbiAgdmFyIGxpc3QgPSBbXVxuICB2YXIgbGFuZ3VhZ2VcblxuICBmb3IgKGxhbmd1YWdlIGluIGxhbmd1YWdlcykge1xuICAgIGlmIChcbiAgICAgIG93bi5jYWxsKGxhbmd1YWdlcywgbGFuZ3VhZ2UpICYmXG4gICAgICB0eXBlb2YgbGFuZ3VhZ2VzW2xhbmd1YWdlXSA9PT0gJ29iamVjdCdcbiAgICApIHtcbiAgICAgIGxpc3QucHVzaChsYW5ndWFnZSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbGlzdFxufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnkodmFsdWUsIGxhbmd1YWdlLCBwYXJlbnQpIHtcbiAgdmFyIGVudlxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHt0eXBlOiAndGV4dCcsIHZhbHVlOiB2YWx1ZX1cbiAgfVxuXG4gIGlmIChyZWZyYWN0LnV0aWwudHlwZSh2YWx1ZSkgPT09ICdBcnJheScpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5QWxsKHZhbHVlLCBsYW5ndWFnZSlcbiAgfVxuXG4gIGVudiA9IHtcbiAgICB0eXBlOiB2YWx1ZS50eXBlLFxuICAgIGNvbnRlbnQ6IHJlZnJhY3QuVG9rZW4uc3RyaW5naWZ5KHZhbHVlLmNvbnRlbnQsIGxhbmd1YWdlLCBwYXJlbnQpLFxuICAgIHRhZzogJ3NwYW4nLFxuICAgIGNsYXNzZXM6IFsndG9rZW4nLCB2YWx1ZS50eXBlXSxcbiAgICBhdHRyaWJ1dGVzOiB7fSxcbiAgICBsYW5ndWFnZTogbGFuZ3VhZ2UsXG4gICAgcGFyZW50OiBwYXJlbnRcbiAgfVxuXG4gIGlmICh2YWx1ZS5hbGlhcykge1xuICAgIGVudi5jbGFzc2VzID0gZW52LmNsYXNzZXMuY29uY2F0KHZhbHVlLmFsaWFzKVxuICB9XG5cbiAgcmVmcmFjdC5ob29rcy5ydW4oJ3dyYXAnLCBlbnYpXG5cbiAgcmV0dXJuIGgoXG4gICAgZW52LnRhZyArICcuJyArIGVudi5jbGFzc2VzLmpvaW4oJy4nKSxcbiAgICBhdHRyaWJ1dGVzKGVudi5hdHRyaWJ1dGVzKSxcbiAgICBlbnYuY29udGVudFxuICApXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUFsbCh2YWx1ZXMsIGxhbmd1YWdlKSB7XG4gIHZhciByZXN1bHQgPSBbXVxuICB2YXIgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aFxuICB2YXIgaW5kZXggPSAtMVxuICB2YXIgdmFsdWVcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhbHVlID0gdmFsdWVzW2luZGV4XVxuXG4gICAgaWYgKHZhbHVlICE9PSAnJyAmJiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXN1bHQucHVzaCh2YWx1ZSlcbiAgICB9XG4gIH1cblxuICBpbmRleCA9IC0xXG4gIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGhcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhbHVlID0gcmVzdWx0W2luZGV4XVxuICAgIHJlc3VsdFtpbmRleF0gPSByZWZyYWN0LlRva2VuLnN0cmluZ2lmeSh2YWx1ZSwgbGFuZ3VhZ2UsIHJlc3VsdClcbiAgfVxuXG4gIHJldHVybiByZXN1bHRcbn1cblxuZnVuY3Rpb24gZW5jb2RlKHRva2Vucykge1xuICByZXR1cm4gdG9rZW5zXG59XG5cbmZ1bmN0aW9uIGF0dHJpYnV0ZXMoYXR0cnMpIHtcbiAgdmFyIGtleVxuXG4gIGZvciAoa2V5IGluIGF0dHJzKSB7XG4gICAgYXR0cnNba2V5XSA9IGRlY29kZShhdHRyc1trZXldKVxuICB9XG5cbiAgcmV0dXJuIGF0dHJzXG59XG5cbmZ1bmN0aW9uIGNhcHR1cmUoKSB7XG4gIHZhciBkZWZpbmVkID0gJ1ByaXNtJyBpbiBjdHhcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgdmFyIGN1cnJlbnQgPSBkZWZpbmVkID8gY3R4LlByaXNtIDogdW5kZWZpbmVkXG5cbiAgcmV0dXJuIHJlc3RvcmVcblxuICBmdW5jdGlvbiByZXN0b3JlKCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlIC0gQ2xlYW4gbGVha3MgYWZ0ZXIgUHJpc20uICovXG4gICAgaWYgKGRlZmluZWQpIHtcbiAgICAgIGN0eC5QcmlzbSA9IGN1cnJlbnRcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIGN0eC5QcmlzbVxuICAgIH1cblxuICAgIGRlZmluZWQgPSB1bmRlZmluZWRcbiAgICBjdXJyZW50ID0gdW5kZWZpbmVkXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJjdHgiLCJnbG9iYWxUaGlzIiwic2VsZiIsIndpbmRvdyIsImdsb2JhbCIsInJlc3RvcmUiLCJjYXB0dXJlIiwiUHJpc20iLCJtYW51YWwiLCJkaXNhYmxlV29ya2VyTWVzc2FnZUhhbmRsZXIiLCJoIiwicmVxdWlyZSIsImRlY29kZSIsIm1hcmt1cCIsImNzcyIsImNsaWtlIiwianMiLCJvd24iLCJoYXNPd25Qcm9wZXJ0eSIsIlJlZnJhY3RvciIsInByb3RvdHlwZSIsInJlZnJhY3QiLCJtb2R1bGUiLCJleHBvcnRzIiwiaGlnaGxpZ2h0IiwicmVnaXN0ZXIiLCJhbGlhcyIsInJlZ2lzdGVyZWQiLCJsaXN0TGFuZ3VhZ2VzIiwidXRpbCIsImVuY29kZSIsIlRva2VuIiwic3RyaW5naWZ5IiwiZ3JhbW1hciIsImRpc3BsYXlOYW1lIiwiRXJyb3IiLCJsYW5ndWFnZXMiLCJ1bmRlZmluZWQiLCJuYW1lIiwibWFwIiwia2V5IiwibGlzdCIsImxlbmd0aCIsImluZGV4IiwidmFsdWUiLCJzdXAiLCJ0eXBlIiwiY2FsbCIsImxhbmd1YWdlIiwicHVzaCIsInBhcmVudCIsImVudiIsInN0cmluZ2lmeUFsbCIsImNvbnRlbnQiLCJ0YWciLCJjbGFzc2VzIiwiYXR0cmlidXRlcyIsImNvbmNhdCIsImhvb2tzIiwicnVuIiwiam9pbiIsInZhbHVlcyIsInJlc3VsdCIsInRva2VucyIsImF0dHJzIiwiZGVmaW5lZCIsImN1cnJlbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/clike.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/clike.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\nmodule.exports = clike;\nclike.displayName = \"clike\";\nclike.aliases = [];\nfunction clike(Prism) {\n    Prism.languages.clike = {\n        comment: [\n            {\n                pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n                lookbehind: true,\n                greedy: true\n            },\n            {\n                pattern: /(^|[^\\\\:])\\/\\/.*/,\n                lookbehind: true,\n                greedy: true\n            }\n        ],\n        string: {\n            pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n            greedy: true\n        },\n        \"class-name\": {\n            pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|trait)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n            lookbehind: true,\n            inside: {\n                punctuation: /[.\\\\]/\n            }\n        },\n        keyword: /\\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\\b/,\n        boolean: /\\b(?:false|true)\\b/,\n        function: /\\b\\w+(?=\\()/,\n        number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n        operator: /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n        punctuation: /[{}[\\];(),.:]/\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvY2xpa2UuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQUEsT0FBT0MsT0FBTyxHQUFHQztBQUNqQkEsTUFBTUMsV0FBVyxHQUFHO0FBQ3BCRCxNQUFNRSxPQUFPLEdBQUcsRUFBRTtBQUNsQixTQUFTRixNQUFNRyxLQUFLO0lBQ2xCQSxNQUFNQyxTQUFTLENBQUNKLEtBQUssR0FBRztRQUN0QkssU0FBUztZQUNQO2dCQUNFQyxTQUFTO2dCQUNUQyxZQUFZO2dCQUNaQyxRQUFRO1lBQ1Y7WUFDQTtnQkFDRUYsU0FBUztnQkFDVEMsWUFBWTtnQkFDWkMsUUFBUTtZQUNWO1NBQ0Q7UUFDREMsUUFBUTtZQUNOSCxTQUFTO1lBQ1RFLFFBQVE7UUFDVjtRQUNBLGNBQWM7WUFDWkYsU0FDRTtZQUNGQyxZQUFZO1lBQ1pHLFFBQVE7Z0JBQ05DLGFBQWE7WUFDZjtRQUNGO1FBQ0FDLFNBQ0U7UUFDRkMsU0FBUztRQUNUQyxVQUFVO1FBQ1ZDLFFBQVE7UUFDUkMsVUFBVTtRQUNWTCxhQUFhO0lBQ2Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3BsaXBsaTktcGFyYW5vcm1hbC8uL25vZGVfbW9kdWxlcy9yZWZyYWN0b3IvbGFuZy9jbGlrZS5qcz80ODE0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNsaWtlXG5jbGlrZS5kaXNwbGF5TmFtZSA9ICdjbGlrZSdcbmNsaWtlLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gY2xpa2UoUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLmNsaWtlID0ge1xuICAgIGNvbW1lbnQ6IFtcbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjogLyhefFteXFxcXF0pXFwvXFwqW1xcc1xcU10qPyg/OlxcKlxcL3wkKS8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjogLyhefFteXFxcXDpdKVxcL1xcLy4qLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgICB9XG4gICAgXSxcbiAgICBzdHJpbmc6IHtcbiAgICAgIHBhdHRlcm46IC8oW1wiJ10pKD86XFxcXCg/OlxcclxcbnxbXFxzXFxTXSl8KD8hXFwxKVteXFxcXFxcclxcbl0pKlxcMS8sXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgICdjbGFzcy1uYW1lJzoge1xuICAgICAgcGF0dGVybjpcbiAgICAgICAgLyhcXGIoPzpjbGFzc3xleHRlbmRzfGltcGxlbWVudHN8aW5zdGFuY2VvZnxpbnRlcmZhY2V8bmV3fHRyYWl0KVxccyt8XFxiY2F0Y2hcXHMrXFwoKVtcXHcuXFxcXF0rL2ksXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIHB1bmN0dWF0aW9uOiAvWy5cXFxcXS9cbiAgICAgIH1cbiAgICB9LFxuICAgIGtleXdvcmQ6XG4gICAgICAvXFxiKD86YnJlYWt8Y2F0Y2h8Y29udGludWV8ZG98ZWxzZXxmaW5hbGx5fGZvcnxmdW5jdGlvbnxpZnxpbnxpbnN0YW5jZW9mfG5ld3xudWxsfHJldHVybnx0aHJvd3x0cnl8d2hpbGUpXFxiLyxcbiAgICBib29sZWFuOiAvXFxiKD86ZmFsc2V8dHJ1ZSlcXGIvLFxuICAgIGZ1bmN0aW9uOiAvXFxiXFx3Kyg/PVxcKCkvLFxuICAgIG51bWJlcjogL1xcYjB4W1xcZGEtZl0rXFxifCg/OlxcYlxcZCsoPzpcXC5cXGQqKT98XFxCXFwuXFxkKykoPzplWystXT9cXGQrKT8vaSxcbiAgICBvcGVyYXRvcjogL1s8Pl09P3xbIT1dPT89P3wtLT98XFwrXFwrP3wmJj98XFx8XFx8P3xbPyovfl4lXS8sXG4gICAgcHVuY3R1YXRpb246IC9be31bXFxdOygpLC46XS9cbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJjbGlrZSIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsInBhdHRlcm4iLCJsb29rYmVoaW5kIiwiZ3JlZWR5Iiwic3RyaW5nIiwiaW5zaWRlIiwicHVuY3R1YXRpb24iLCJrZXl3b3JkIiwiYm9vbGVhbiIsImZ1bmN0aW9uIiwibnVtYmVyIiwib3BlcmF0b3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/clike.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/css.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/css.js ***!
  \********************************************/
/***/ ((module) => {

eval("\nmodule.exports = css;\ncss.displayName = \"css\";\ncss.aliases = [];\nfunction css(Prism) {\n    ;\n    (function(Prism) {\n        var string = /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;\n        Prism.languages.css = {\n            comment: /\\/\\*[\\s\\S]*?\\*\\//,\n            atrule: {\n                pattern: /@[\\w-](?:[^;{\\s]|\\s+(?![\\s{]))*(?:;|(?=\\s*\\{))/,\n                inside: {\n                    rule: /^@[\\w-]+/,\n                    \"selector-function-argument\": {\n                        pattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n                        lookbehind: true,\n                        alias: \"selector\"\n                    },\n                    keyword: {\n                        pattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n                        lookbehind: true\n                    } // See rest below\n                }\n            },\n            url: {\n                // https://drafts.csswg.org/css-values-3/#urls\n                pattern: RegExp(\"\\\\burl\\\\((?:\" + string.source + \"|\" + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + \")\\\\)\", \"i\"),\n                greedy: true,\n                inside: {\n                    function: /^url/i,\n                    punctuation: /^\\(|\\)$/,\n                    string: {\n                        pattern: RegExp(\"^\" + string.source + \"$\"),\n                        alias: \"url\"\n                    }\n                }\n            },\n            selector: {\n                pattern: RegExp(\"(^|[{}\\\\s])[^{}\\\\s](?:[^{};\\\"'\\\\s]|\\\\s+(?![\\\\s{])|\" + string.source + \")*(?=\\\\s*\\\\{)\"),\n                lookbehind: true\n            },\n            string: {\n                pattern: string,\n                greedy: true\n            },\n            property: {\n                pattern: /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n                lookbehind: true\n            },\n            important: /!important\\b/i,\n            function: {\n                pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\n                lookbehind: true\n            },\n            punctuation: /[(){};:,]/\n        };\n        Prism.languages.css[\"atrule\"].inside.rest = Prism.languages.css;\n        var markup = Prism.languages.markup;\n        if (markup) {\n            markup.tag.addInlined(\"style\", \"css\");\n            markup.tag.addAttribute(\"style\", \"css\");\n        }\n    })(Prism);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvY3NzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBR0M7QUFDakJBLElBQUlDLFdBQVcsR0FBRztBQUNsQkQsSUFBSUUsT0FBTyxHQUFHLEVBQUU7QUFDaEIsU0FBU0YsSUFBSUcsS0FBSzs7SUFDZCxVQUFVQSxLQUFLO1FBQ2YsSUFBSUMsU0FDRjtRQUNGRCxNQUFNRSxTQUFTLENBQUNMLEdBQUcsR0FBRztZQUNwQk0sU0FBUztZQUNUQyxRQUFRO2dCQUNOQyxTQUFTO2dCQUNUQyxRQUFRO29CQUNOQyxNQUFNO29CQUNOLDhCQUE4Qjt3QkFDNUJGLFNBQ0U7d0JBQ0ZHLFlBQVk7d0JBQ1pDLE9BQU87b0JBQ1Q7b0JBQ0FDLFNBQVM7d0JBQ1BMLFNBQVM7d0JBQ1RHLFlBQVk7b0JBQ2QsRUFBRSxpQkFBaUI7Z0JBQ3JCO1lBQ0Y7WUFDQUcsS0FBSztnQkFDSCw4Q0FBOEM7Z0JBQzlDTixTQUFTTyxPQUNQLGlCQUNFWCxPQUFPWSxNQUFNLEdBQ2IsTUFDQSw4QkFBOEJBLE1BQU0sR0FDcEMsUUFDRjtnQkFFRkMsUUFBUTtnQkFDUlIsUUFBUTtvQkFDTlMsVUFBVTtvQkFDVkMsYUFBYTtvQkFDYmYsUUFBUTt3QkFDTkksU0FBU08sT0FBTyxNQUFNWCxPQUFPWSxNQUFNLEdBQUc7d0JBQ3RDSixPQUFPO29CQUNUO2dCQUNGO1lBQ0Y7WUFDQVEsVUFBVTtnQkFDUlosU0FBU08sT0FDUCx1REFDRVgsT0FBT1ksTUFBTSxHQUNiO2dCQUVKTCxZQUFZO1lBQ2Q7WUFDQVAsUUFBUTtnQkFDTkksU0FBU0o7Z0JBQ1RhLFFBQVE7WUFDVjtZQUNBSSxVQUFVO2dCQUNSYixTQUNFO2dCQUNGRyxZQUFZO1lBQ2Q7WUFDQVcsV0FBVztZQUNYSixVQUFVO2dCQUNSVixTQUFTO2dCQUNURyxZQUFZO1lBQ2Q7WUFDQVEsYUFBYTtRQUNmO1FBQ0FoQixNQUFNRSxTQUFTLENBQUNMLEdBQUcsQ0FBQyxTQUFTLENBQUNTLE1BQU0sQ0FBQ2MsSUFBSSxHQUFHcEIsTUFBTUUsU0FBUyxDQUFDTCxHQUFHO1FBQy9ELElBQUl3QixTQUFTckIsTUFBTUUsU0FBUyxDQUFDbUIsTUFBTTtRQUNuQyxJQUFJQSxRQUFRO1lBQ1ZBLE9BQU9DLEdBQUcsQ0FBQ0MsVUFBVSxDQUFDLFNBQVM7WUFDL0JGLE9BQU9DLEdBQUcsQ0FBQ0UsWUFBWSxDQUFDLFNBQVM7UUFDbkM7SUFDRixHQUFHeEI7QUFDTCIsInNvdXJjZXMiOlsid2VicGFjazovL3BsaXBsaTktcGFyYW5vcm1hbC8uL25vZGVfbW9kdWxlcy9yZWZyYWN0b3IvbGFuZy9jc3MuanM/N2JjNSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBjc3NcbmNzcy5kaXNwbGF5TmFtZSA9ICdjc3MnXG5jc3MuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBjc3MoUHJpc20pIHtcbiAgOyhmdW5jdGlvbiAoUHJpc20pIHtcbiAgICB2YXIgc3RyaW5nID1cbiAgICAgIC8oPzpcIig/OlxcXFwoPzpcXHJcXG58W1xcc1xcU10pfFteXCJcXFxcXFxyXFxuXSkqXCJ8Jyg/OlxcXFwoPzpcXHJcXG58W1xcc1xcU10pfFteJ1xcXFxcXHJcXG5dKSonKS9cbiAgICBQcmlzbS5sYW5ndWFnZXMuY3NzID0ge1xuICAgICAgY29tbWVudDogL1xcL1xcKltcXHNcXFNdKj9cXCpcXC8vLFxuICAgICAgYXRydWxlOiB7XG4gICAgICAgIHBhdHRlcm46IC9AW1xcdy1dKD86W147e1xcc118XFxzKyg/IVtcXHN7XSkpKig/Ojt8KD89XFxzKlxceykpLyxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgcnVsZTogL15AW1xcdy1dKy8sXG4gICAgICAgICAgJ3NlbGVjdG9yLWZ1bmN0aW9uLWFyZ3VtZW50Jzoge1xuICAgICAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAgICAgLyhcXGJzZWxlY3RvclxccypcXChcXHMqKD8hW1xccyldKSkoPzpbXigpXFxzXXxcXHMrKD8hW1xccyldKXxcXCgoPzpbXigpXXxcXChbXigpXSpcXCkpKlxcKSkrKD89XFxzKlxcKSkvLFxuICAgICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICAgIGFsaWFzOiAnc2VsZWN0b3InXG4gICAgICAgICAgfSxcbiAgICAgICAgICBrZXl3b3JkOiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiAvKF58W15cXHctXSkoPzphbmR8bm90fG9ubHl8b3IpKD8hW1xcdy1dKS8sXG4gICAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICAgICAgfSAvLyBTZWUgcmVzdCBiZWxvd1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdXJsOiB7XG4gICAgICAgIC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdmFsdWVzLTMvI3VybHNcbiAgICAgICAgcGF0dGVybjogUmVnRXhwKFxuICAgICAgICAgICdcXFxcYnVybFxcXFwoKD86JyArXG4gICAgICAgICAgICBzdHJpbmcuc291cmNlICtcbiAgICAgICAgICAgICd8JyArXG4gICAgICAgICAgICAvKD86W15cXFxcXFxyXFxuKClcIiddfFxcXFxbXFxzXFxTXSkqLy5zb3VyY2UgK1xuICAgICAgICAgICAgJylcXFxcKScsXG4gICAgICAgICAgJ2knXG4gICAgICAgICksXG4gICAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgZnVuY3Rpb246IC9edXJsL2ksXG4gICAgICAgICAgcHVuY3R1YXRpb246IC9eXFwofFxcKSQvLFxuICAgICAgICAgIHN0cmluZzoge1xuICAgICAgICAgICAgcGF0dGVybjogUmVnRXhwKCdeJyArIHN0cmluZy5zb3VyY2UgKyAnJCcpLFxuICAgICAgICAgICAgYWxpYXM6ICd1cmwnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc2VsZWN0b3I6IHtcbiAgICAgICAgcGF0dGVybjogUmVnRXhwKFxuICAgICAgICAgICcoXnxbe31cXFxcc10pW157fVxcXFxzXSg/Oltee307XCJcXCdcXFxcc118XFxcXHMrKD8hW1xcXFxze10pfCcgK1xuICAgICAgICAgICAgc3RyaW5nLnNvdXJjZSArXG4gICAgICAgICAgICAnKSooPz1cXFxccypcXFxceyknXG4gICAgICAgICksXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICBzdHJpbmc6IHtcbiAgICAgICAgcGF0dGVybjogc3RyaW5nLFxuICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgIH0sXG4gICAgICBwcm9wZXJ0eToge1xuICAgICAgICBwYXR0ZXJuOlxuICAgICAgICAgIC8oXnxbXi1cXHdcXHhBMC1cXHVGRkZGXSkoPyFcXHMpWy1fYS16XFx4QTAtXFx1RkZGRl0oPzooPyFcXHMpWy1cXHdcXHhBMC1cXHVGRkZGXSkqKD89XFxzKjopL2ksXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICBpbXBvcnRhbnQ6IC8haW1wb3J0YW50XFxiL2ksXG4gICAgICBmdW5jdGlvbjoge1xuICAgICAgICBwYXR0ZXJuOiAvKF58W14tYS16MC05XSlbLWEtejAtOV0rKD89XFwoKS9pLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICB9LFxuICAgICAgcHVuY3R1YXRpb246IC9bKCl7fTs6LF0vXG4gICAgfVxuICAgIFByaXNtLmxhbmd1YWdlcy5jc3NbJ2F0cnVsZSddLmluc2lkZS5yZXN0ID0gUHJpc20ubGFuZ3VhZ2VzLmNzc1xuICAgIHZhciBtYXJrdXAgPSBQcmlzbS5sYW5ndWFnZXMubWFya3VwXG4gICAgaWYgKG1hcmt1cCkge1xuICAgICAgbWFya3VwLnRhZy5hZGRJbmxpbmVkKCdzdHlsZScsICdjc3MnKVxuICAgICAgbWFya3VwLnRhZy5hZGRBdHRyaWJ1dGUoJ3N0eWxlJywgJ2NzcycpXG4gICAgfVxuICB9KShQcmlzbSlcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiY3NzIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJzdHJpbmciLCJsYW5ndWFnZXMiLCJjb21tZW50IiwiYXRydWxlIiwicGF0dGVybiIsImluc2lkZSIsInJ1bGUiLCJsb29rYmVoaW5kIiwiYWxpYXMiLCJrZXl3b3JkIiwidXJsIiwiUmVnRXhwIiwic291cmNlIiwiZ3JlZWR5IiwiZnVuY3Rpb24iLCJwdW5jdHVhdGlvbiIsInNlbGVjdG9yIiwicHJvcGVydHkiLCJpbXBvcnRhbnQiLCJyZXN0IiwibWFya3VwIiwidGFnIiwiYWRkSW5saW5lZCIsImFkZEF0dHJpYnV0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/css.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/javascript.js":
/*!***************************************************!*\
  !*** ./node_modules/refractor/lang/javascript.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\nmodule.exports = javascript;\njavascript.displayName = \"javascript\";\njavascript.aliases = [\n    \"js\"\n];\nfunction javascript(Prism) {\n    Prism.languages.javascript = Prism.languages.extend(\"clike\", {\n        \"class-name\": [\n            Prism.languages.clike[\"class-name\"],\n            {\n                pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:constructor|prototype))/,\n                lookbehind: true\n            }\n        ],\n        keyword: [\n            {\n                pattern: /((?:^|\\})\\s*)catch\\b/,\n                lookbehind: true\n            },\n            {\n                pattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n                lookbehind: true\n            }\n        ],\n        // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n        function: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n        number: {\n            pattern: RegExp(/(^|[^\\w$])/.source + \"(?:\" + // constant\n            (/NaN|Infinity/.source + \"|\" + // binary integer\n            /0[bB][01]+(?:_[01]+)*n?/.source + \"|\" + // octal integer\n            /0[oO][0-7]+(?:_[0-7]+)*n?/.source + \"|\" + // hexadecimal integer\n            /0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?/.source + \"|\" + // decimal bigint\n            /\\d+(?:_\\d+)*n/.source + \"|\" + // decimal number (integer or float) but no bigint\n            /(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?/.source) + \")\" + /(?![\\w$])/.source),\n            lookbehind: true\n        },\n        operator: /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n    });\n    Prism.languages.javascript[\"class-name\"][0].pattern = /(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)[\\w.\\\\]+/;\n    Prism.languages.insertBefore(\"javascript\", \"keyword\", {\n        regex: {\n            // eslint-disable-next-line regexp/no-dupe-characters-character-class\n            pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,\n            lookbehind: true,\n            greedy: true,\n            inside: {\n                \"regex-source\": {\n                    pattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n                    lookbehind: true,\n                    alias: \"language-regex\",\n                    inside: Prism.languages.regex\n                },\n                \"regex-delimiter\": /^\\/|\\/$/,\n                \"regex-flags\": /^[a-z]+$/\n            }\n        },\n        // This must be declared before keyword because we use \"function\" inside the look-forward\n        \"function-variable\": {\n            pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n            alias: \"function\"\n        },\n        parameter: [\n            {\n                pattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n                lookbehind: true,\n                inside: Prism.languages.javascript\n            },\n            {\n                pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n                lookbehind: true,\n                inside: Prism.languages.javascript\n            },\n            {\n                pattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n                lookbehind: true,\n                inside: Prism.languages.javascript\n            },\n            {\n                pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n                lookbehind: true,\n                inside: Prism.languages.javascript\n            }\n        ],\n        constant: /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n    });\n    Prism.languages.insertBefore(\"javascript\", \"string\", {\n        hashbang: {\n            pattern: /^#!.*/,\n            greedy: true,\n            alias: \"comment\"\n        },\n        \"template-string\": {\n            pattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n            greedy: true,\n            inside: {\n                \"template-punctuation\": {\n                    pattern: /^`|`$/,\n                    alias: \"string\"\n                },\n                interpolation: {\n                    pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n                    lookbehind: true,\n                    inside: {\n                        \"interpolation-punctuation\": {\n                            pattern: /^\\$\\{|\\}$/,\n                            alias: \"punctuation\"\n                        },\n                        rest: Prism.languages.javascript\n                    }\n                },\n                string: /[\\s\\S]+/\n            }\n        },\n        \"string-property\": {\n            pattern: /((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m,\n            lookbehind: true,\n            greedy: true,\n            alias: \"property\"\n        }\n    });\n    Prism.languages.insertBefore(\"javascript\", \"operator\", {\n        \"literal-property\": {\n            pattern: /((?:^|[,{])[ \\t]*)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/m,\n            lookbehind: true,\n            alias: \"property\"\n        }\n    });\n    if (Prism.languages.markup) {\n        Prism.languages.markup.tag.addInlined(\"script\", \"javascript\") // add attribute support for all DOM events.\n        ;\n        // https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events\n        Prism.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source, \"javascript\");\n    }\n    Prism.languages.js = Prism.languages.javascript;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/javascript.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/markup.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/markup.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\nmodule.exports = markup;\nmarkup.displayName = \"markup\";\nmarkup.aliases = [\n    \"html\",\n    \"mathml\",\n    \"svg\",\n    \"xml\",\n    \"ssml\",\n    \"atom\",\n    \"rss\"\n];\nfunction markup(Prism) {\n    Prism.languages.markup = {\n        comment: {\n            pattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\n            greedy: true\n        },\n        prolog: {\n            pattern: /<\\?[\\s\\S]+?\\?>/,\n            greedy: true\n        },\n        doctype: {\n            // https://www.w3.org/TR/xml/#NT-doctypedecl\n            pattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n            greedy: true,\n            inside: {\n                \"internal-subset\": {\n                    pattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n                    lookbehind: true,\n                    greedy: true,\n                    inside: null // see below\n                },\n                string: {\n                    pattern: /\"[^\"]*\"|'[^']*'/,\n                    greedy: true\n                },\n                punctuation: /^<!|>$|[[\\]]/,\n                \"doctype-tag\": /^DOCTYPE/i,\n                name: /[^\\s<>'\"]+/\n            }\n        },\n        cdata: {\n            pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n            greedy: true\n        },\n        tag: {\n            pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n            greedy: true,\n            inside: {\n                tag: {\n                    pattern: /^<\\/?[^\\s>\\/]+/,\n                    inside: {\n                        punctuation: /^<\\/?/,\n                        namespace: /^[^\\s>\\/:]+:/\n                    }\n                },\n                \"special-attr\": [],\n                \"attr-value\": {\n                    pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n                    inside: {\n                        punctuation: [\n                            {\n                                pattern: /^=/,\n                                alias: \"attr-equals\"\n                            },\n                            /\"|'/\n                        ]\n                    }\n                },\n                punctuation: /\\/?>/,\n                \"attr-name\": {\n                    pattern: /[^\\s>\\/]+/,\n                    inside: {\n                        namespace: /^[^\\s>\\/:]+:/\n                    }\n                }\n            }\n        },\n        entity: [\n            {\n                pattern: /&[\\da-z]{1,8};/i,\n                alias: \"named-entity\"\n            },\n            /&#x?[\\da-f]{1,8};/i\n        ]\n    };\n    Prism.languages.markup[\"tag\"].inside[\"attr-value\"].inside[\"entity\"] = Prism.languages.markup[\"entity\"];\n    Prism.languages.markup[\"doctype\"].inside[\"internal-subset\"].inside = Prism.languages.markup // Plugin to make entity title show the real entity, idea by Roman Komarov\n    ;\n    Prism.hooks.add(\"wrap\", function(env) {\n        if (env.type === \"entity\") {\n            env.attributes[\"title\"] = env.content.value.replace(/&amp;/, \"&\");\n        }\n    });\n    Object.defineProperty(Prism.languages.markup.tag, \"addInlined\", {\n        /**\n     * Adds an inlined language to markup.\n     *\n     * An example of an inlined language is CSS with `<style>` tags.\n     *\n     * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n     * case insensitive.\n     * @param {string} lang The language key.\n     * @example\n     * addInlined('style', 'css');\n     */ value: function addInlined(tagName, lang) {\n            var includedCdataInside = {};\n            includedCdataInside[\"language-\" + lang] = {\n                pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n                lookbehind: true,\n                inside: Prism.languages[lang]\n            };\n            includedCdataInside[\"cdata\"] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n            var inside = {\n                \"included-cdata\": {\n                    pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n                    inside: includedCdataInside\n                }\n            };\n            inside[\"language-\" + lang] = {\n                pattern: /[\\s\\S]+/,\n                inside: Prism.languages[lang]\n            };\n            var def = {};\n            def[tagName] = {\n                pattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function() {\n                    return tagName;\n                }), \"i\"),\n                lookbehind: true,\n                greedy: true,\n                inside: inside\n            };\n            Prism.languages.insertBefore(\"markup\", \"cdata\", def);\n        }\n    });\n    Object.defineProperty(Prism.languages.markup.tag, \"addAttribute\", {\n        /**\n     * Adds an pattern to highlight languages embedded in HTML attributes.\n     *\n     * An example of an inlined language is CSS with `style` attributes.\n     *\n     * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\n     * case insensitive.\n     * @param {string} lang The language key.\n     * @example\n     * addAttribute('style', 'css');\n     */ value: function(attrName, lang) {\n            Prism.languages.markup.tag.inside[\"special-attr\"].push({\n                pattern: RegExp(/(^|[\"'\\s])/.source + \"(?:\" + attrName + \")\" + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source, \"i\"),\n                lookbehind: true,\n                inside: {\n                    \"attr-name\": /^[^\\s=]+/,\n                    \"attr-value\": {\n                        pattern: /=[\\s\\S]+/,\n                        inside: {\n                            value: {\n                                pattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n                                lookbehind: true,\n                                alias: [\n                                    lang,\n                                    \"language-\" + lang\n                                ],\n                                inside: Prism.languages[lang]\n                            },\n                            punctuation: [\n                                {\n                                    pattern: /^=/,\n                                    alias: \"attr-equals\"\n                                },\n                                /\"|'/\n                            ]\n                        }\n                    }\n                }\n            });\n        }\n    });\n    Prism.languages.html = Prism.languages.markup;\n    Prism.languages.mathml = Prism.languages.markup;\n    Prism.languages.svg = Prism.languages.markup;\n    Prism.languages.xml = Prism.languages.extend(\"markup\", {});\n    Prism.languages.ssml = Prism.languages.xml;\n    Prism.languages.atom = Prism.languages.xml;\n    Prism.languages.rss = Prism.languages.xml;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/markup.js\n");

/***/ })

};
;